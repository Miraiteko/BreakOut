# COPY-PASTED FOR NOW
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

types state_panel_types {
	### WORKFORCE
	type state_panel_buildings_fixed_bottom = container {
		tooltip = "STATE_AVAILABLE_LABOR"
		minimumsize = { @panel_width -1 }
		
		background = {
			using = entry_bg_simple
		}
		flowcontainer = {
			direction = vertical
			margin = { 10 5 }
			spacing = 2

			flowcontainer = {
				spacing = 7
				visible = "[GreaterThan_int32(State.GetNumUnemployedWorkingAdults, '(int32)0')]"

				textbox = {
					text = "UNEMPLOYED_TITLE"
					autoresize = yes
					align = nobaseline
					elide = right
					maximumsize = { 130 -1 }
				}

				textbox = {
					text = "#variable [State.GetNumUnemployedWorkingAdults|D]#!"
					autoresize = yes
					align = nobaseline
				}
			}

			# Right-aligned if there are unemployed
			flowcontainer = {
				spacing = 7

				textbox = {
					text = "[concept_peasants]:"
					autoresize = yes
					align = nobaseline
					elide = right
					maximumsize = { 130 -1 }
				}

				textbox = {
					text = "[State.GetNumSubsistenceWorkingAdults|Dv]"
					autoresize = yes
					align = right|nobaseline
				}
			}
		}

		flowcontainer = {
			spacing = 7
			parentanchor = right|vcenter
			margin_right = 10

			textbox = {
				text = "[concept_pop_qualifications]: "
				autoresize = yes
				align = nobaseline
				elide = right
				maximumsize = { 130 -1 }
			}
			
			textbox = {
				visible = "[Not(State.HasInsufficientQualificationsForAvailablePositions)]"
				text = "@green_checkmark!"
				autoresize = yes
				align = nobaseline
				maximumsize = { 130 -1 }
				tooltip = "[State.GetPotentialQualificationsDesc]"
			}
			
			textbox = {
				visible = "[State.HasInsufficientQualificationsForAvailablePositions]"
				text = "@red_cross!"
				autoresize = yes
				align = nobaseline
				maximumsize = { 130 -1 }
				tooltip = "[State.GetPotentialQualificationsDesc]"
			}
		}
	}

	type state_panel_buildings_content = flowcontainer {
		ignoreinvisible = yes
		direction = vertical
		using = default_list_position


		default_header_2texts = {
			visible = no
			blockoverride "text1" {
				text = "BUILDINGS"
			}
		}

		default_header = {
			blockoverride "text" {
				text = "URBAN_PART_OF_STATE"
			}
			
			# grid/list toggle
			button_icon_round_toggle = {
				size = { 29 29 }
				parentanchor = right|vcenter
				position = { -10 0 }
				
				blockoverride "on_click" {
					onclick = "[GetVariableSystem.Toggle('buildings_list')]"
				}
				blockoverride "view_1" {
					visible = "[Not(GetVariableSystem.Exists('buildings_list'))]"
				}
				blockoverride "view_2" {
					visible = "[GetVariableSystem.Exists('buildings_list')]"
				}
				blockoverride "icon_1" {
					texture = "gfx/interface/buttons/button_icons/grid.dds"
				}
				blockoverride "icon_2" {
					texture = "gfx/interface/buttons/button_icons/list.dds"
				}
				blockoverride "tooltip_1" {
					tooltip = "TOOLTIP_VIEW_LIST"
				}
				blockoverride "tooltip_2" {
					tooltip = "TOOLTIP_VIEW_GRID"
				}
			}
		}

		### URBAN BUILDINGS
		flowcontainer = {
			parentanchor = hcenter
			direction = vertical
			visible = "[Not(GetVariableSystem.Exists('buildings_list'))]"
			spacing = 10
			margin_top = 10
			
			header_building_item = {
				datacontext = "[StatesPanel.AccessBuilding('building_urban_center')]"
				tooltipwidget = {
					FancyTooltip_Building = {}
				}
				blockoverride "text" {
					text = "TOTAL_URBAN_CENTERS"
				}					
			}
			header_building_item = {
				datacontext = "[StatesPanel.AccessBuilding('casino')]"
				tooltipwidget = {
					FancyTooltip_Building = {}
				}
				blockoverride "text" {
					text = "TOTAL_ILLEGAL_BUILDINGS"
				}					
			}
			
			### URBAN BUILDINGS
			container = {
				datamodel = "[State.AccessCappedRuralBuildings]"

				dynamicgridbox = {
					name = "urban_building_list"
					datamodel = "[State.AccessUrbanBuildings]"
					datamodel_wrap = 4
					flipdirection = yes

					item = {
						building_item = {
						}
					}
				}

				widget = {
					size = { 135 180 }
					visible = "[State.GetCountry.IsLocalPlayer]"
					position = "[StatesPanel.CalcBuildUrbanBuildingsButtonPosition]"
					
					button_icon_plus_square = {
						size = { 135 170 }
						tooltip = "BUILD_URBAN_BUILDING"
						onclick = "[StatesPanel.ToggleBuildUrbanBuildingsMenu(PdxGuiWidget.Self)]"
						
						blockoverride "icon_size" {
							size = { 80 80 }
						}
					}
				}
			}
		}
		
		### URBAN BUILDINGS LIST VERSION
		flowcontainer = {
			margin_top = 5
			parentanchor = hcenter
			direction = vertical
			visible = "[GetVariableSystem.Exists('buildings_list')]"

			buildings_list_item = {
				datacontext = "[StatesPanel.AccessBuilding('building_urban_center')]"
			}

			buildings_list = {
				blockoverride "datamodel" {
					datamodel = "[State.AccessUrbanBuildings]"
				}
			}

			button_icon_plus_square = {
				visible = "[State.GetCountry.IsLocalPlayer]"
				size = { @panel_width 45 }
				tooltip = "BUILD_URBAN_BUILDING"
				onclick = "[StatesPanel.ToggleBuildUrbanBuildingsMenu(PdxGuiWidget.Self)]"
				blockoverride "icon_size" {
					size = { 45 100% }
				}
			}
		}

		### RESOURCE BUILDINGS
		default_header = {
			visible = "[Not(IsDataModelEmpty( State.AccessCappedRuralBuildings ))]"
			blockoverride "text" {
				text = "RESOURCE"
			}
		}
		
		flowcontainer = {
			parentanchor = hcenter
			minimumsize = { @panel_width -1 }
			margin_top = 10
			direction = vertical
			visible = "[Not(GetVariableSystem.Exists('buildings_list'))]"

			fixedgridbox = {
				datamodel = "[State.AccessCappedRuralBuildings]"
				addcolumn = 135
				addrow = 180
				datamodel_wrap = 4
				flipdirection = yes

				item = {
					building_item = {
					}
				}
			}
		}
		
		### RESOURCE LIST VERSION
		flowcontainer = {
			visible = "[And( GetVariableSystem.Exists('buildings_list'), Not(IsDataModelEmpty(State.AccessCappedRuralBuildings)))]"
			margin_top = 5
			parentanchor = hcenter
			direction = vertical
			
			buildings_list = {
				blockoverride "datamodel" {
					datamodel = "[State.AccessCappedRuralBuildings]"
				}
			}
		}

		### AGRICULTURE
		default_header = {
			blockoverride "text" {
				text = "AGRICULTURE"
			}
		}

		flowcontainer = {
			visible = "[Not(GetVariableSystem.Exists('buildings_list'))]"
			minimumsize = { @panel_width -1 }
			using = default_list_position
			margin_top = 10 
			direction = vertical
			spacing = 10
			
			### UNUSED ARABLE LAND
			header_building_item = {
				tooltipwidget = {
					FancyTooltip_Building = {}
				}
				#tooltip = "LAND_TEXT_TOOLTIP"
				datacontext = "[StatesPanel.AccessSubsistenceBuilding]"
				blockoverride "text" {
					text = "UNUSED_ARABLE"
				}					
			}

			fixedgridbox = {
				datamodel = "[State.AccessUncappedRuralBuildings]"
				addcolumn = 135
				addrow = 180
				datamodel_wrap = 4
				flipdirection = yes

				item = {
					building_item = {
					}
				}
			}
		}

		### AGRICULTURE LIST VERSION
		flowcontainer = {
			margin_top = 5
			margin_bottom = 10
			direction = vertical
			using = default_list_position
			visible = "[GetVariableSystem.Exists('buildings_list')]"
			
			buildings_list = {
				blockoverride "datamodel" {
					datamodel = "[State.AccessUncappedRuralBuildings]"
				}
			}

			buildings_list_item = {
				datacontext = "[StatesPanel.AccessSubsistenceBuilding]"
			}
		}
		
		### DEVELOPMENT
		default_header = {
			blockoverride "text" {
				text = "INFRA_PART_OF_STATE"
			}
		}

		state_panel_button_unclickable = {
			using = default_list_position
			visible = "[Not(GetVariableSystem.Exists('buildings_list'))]"
			container = {
				minimumsize = { @panel_width -1 }
				resizeparent = yes

				flowcontainer = {
					margin_top = 10

					fixedgridbox = {
						datamodel = "[State.AccessDevelopmentBuildings]"
						addcolumn = 135
						addrow = 180
						datamodel_wrap = 4
						flipdirection = yes

						item = {
							building_item = {
							}
						}
					}
				}
			}
		}
		
		### DEVELOPMENT LIST VERSION
		flowcontainer = {
			visible = "[GetVariableSystem.Exists('buildings_list')]"
			margin_top = 5
			margin_bottom = 10
			direction = vertical
			parentanchor = hcenter
			
			buildings_list = {
				blockoverride "datamodel" {
					datamodel = "[State.AccessDevelopmentBuildings]"
				}
			}
		}

		construction_queue = {
			datacontext = "[State.AccessOwner]"
		}
	}
}

types state_buildings 
{
	type buildings_list = flowcontainer {
		parentanchor = hcenter
		minimumsize = { @panel_width -1 }
		direction = vertical

		dynamicgridbox = {
			block "datamodel" {}

			item = {
				buildings_list_item = {}
			}
		}
	}

	type buildings_list_item = button {
		using = default_button
		alpha = "[TransparentIfFalse(Building.IsActive)]"
		onclick = "[InformationPanelBar.OpenBuildingDetailsPanel(Building.AccessSelf)]"
		onrightclick = "[RightClickMenuManager.ShowForBuilding(Building.AccessSelf)]"
		onmousehierarchyenter = "[AccessHighlightManager.HighlightBuilding(Building.Self)]"
		onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
		
		tooltipwidget = {
			FancyTooltip_Building = {}
		}

		flowcontainer = {
			resizeparent = yes
			minimumsize = { @panel_width 40 }
			spacing = 10
			margin_left = 10
			
			icon = {
				size = { 40 40 }
				texture = "[Building.GetTexture]"
				parentanchor = vcenter
			}

			widget = {
				size = { 240 30 }
				parentanchor = vcenter

				hbox = {
					spacing = 3
					textbox = {
						text = "[Building.GetNameNoFormatting]"
						elide = right
						align = nobaseline
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
					}
					
					### INPUT WARNING
					container = {
						visible = "[Building.HasAnyInputShortage]"
					
						icon = {			
							size = { 23 23 }
							texture = "gfx/interface/icons/generic_icons/goods_shortage.dds"
							tooltip = "GOODS_OUTPUT_PENALTY_TOOLTIP"
						}			
					}					
								
					### EMPLOYMENT WARNING
					container = {
						visible = "[LessThan_float(FixedPointToFloat(Building.GetEmploymentPercentage), GetDefine('NGraphics', 'BUILDING_CONSIDERED_FULLY_EMPLOYED'))]"
						
						### EMPLOYMENT WARNING
						icon = {
							visible = "[And(And(Not(Building.IsSubsistenceBuilding), Building.HasFailedHires), Building.IsActive)]"
							size = { 23 23 }
							texture = "gfx/interface/icons/generic_icons/employment_not_full.dds"
							tooltip = "NOT_FULLY_EMPLOYED"
						}

						icon = {
							visible = "[And(And(Not(Building.IsSubsistenceBuilding), Not(Building.HasFailedHires)), Building.IsActive)]"
							size = { 23 23 }
							texture = "gfx/interface/icons/generic_icons/employment_not_full_hiring.dds"
							tooltip = "TOOLTIP_BUILDING_HIRING"
						}
					}
					
					icon = {
						texture = "gfx/interface/production_methods/auto_expand.dds"
						visible = "[And(IsPotential( Building.ToggleAutoExpand ),Building.IsAutoExpanding)]"
						size = { 23 23 }
						tooltip = [Building.GetAutoExpandTooltip]
					}

				}
			}

			textbox = {
				text = "[Building.GetExpansionLevelDesc]"
				tooltip = "[Building.GetEmploymentTooltip]"
				using = tooltip_above
				minimumsize = { 60 -1 }
				maximumsize = { 60 -1 }
				autoresize = yes
				align = right|nobaseline
				parentanchor = vcenter
				margin_right = 10
			}

			textbox = {
				text = "#v @money![Building.GetAverageAnnualEarningsPerEmployeeFormatted|1+]#!"
				tooltip = "TOOLTIP_BUILDING_PRODUCTIVITY"
				margin_right = 10
				tooltipwidget = {
					GraphTooltip_Productivity = {}
				}
				using = tooltip_above
				minimumsize = { 50 -1 }
				maximumsize = { 50 -1 }
				align = right|nobaseline
				parentanchor = vcenter
				autoresize = yes

				visible = "[And(And(And(Not(Building.IsGovernmentFunded), Building.IsActive), Not(Building.IsSubsidized)), Not(Building.IsSubsistenceBuilding))]"
			}
			flowcontainer = {
				visible = "[And(And(Building.IsSelfFunded, Building.IsActive), Building.IsSubsistenceBuilding)]"
				datacontext = "[Building.AccessPopsList]"
				datacontext = "[Building]"
				datamodel = "[PopList.AccessPopList]"
				parentanchor = vcenter
				minimumsize = { 50 -1 }
				maximumsize = { 50 -1 }
			
				item = {
					textbox = {
						tooltip = "ANNUAL_WAGE_TOOLTIP"
						visible = "[And(PopListItem.GetPopType.HasSubsistenceIncome,GreaterThan_int32(PopListItem.GetMaxPopSize,'(int32)0'))]"
						text = "@money![PopListItem.GetAverageAnnualWage|v1]"
						autoresize = yes
						align = right|nobaseline
					}
				}
			}

			widget = {
				size = { 50 23 }
				visible = "[And(Building.IsGovernmentFunded, Building.IsActive)]"
				parentanchor = vcenter

				icon = {
					visible = "[And(Building.IsGovernmentFunded, Building.IsActive)]"
					texture = "gfx/interface/icons/generic_icons/government_building_icon.dds"
					parentanchor = center
					size = { 23 23 }
					tooltip = "TOOLTIP_BUILDINGS_BUDGET"
					using = tooltip_above
				}
			}

			widget = {
				size = { 50 23 }
				visible = "[Building.IsSubsidized]"
				parentanchor = vcenter

				icon = {
					texture = "gfx/interface/production_methods/subsidized.dds"
					alwaystransparent = no
					size = { 23 23 }
					tooltip = "SUBSIDIZED_YES_HEADER"
					parentanchor = center
					using = tooltip_above
				}
			}

			gold_progressbar_horizontal = {
				visible = "[And(GreaterThan_CFixedPoint(Building.GetMaxCashReserves, '(CFixedPoint)0'), Building.IsActive)]"
				size = { 80 10 }
				blockoverride "values" {
					min = 0
					max = "[FixedPointToFloat(Building.GetMaxCashReserves)]"
					value = "[FixedPointToFloat(Building.GetCurrentCashReserves)]"
				}
				using = cash_reserves_tooltip_with_graph
				#tooltip = BUILDING_CASH_RESERVES_TOOLTIP
				alpha = "[TransparentIfFalse(Building.IsActive)]"
				parentanchor = vcenter

				progressbar_highlight = {
					visible = "[GreaterThanOrEqualTo_CFixedPoint(Building.GetCurrentCashReserves, Building.GetMaxCashReserves)]"
				}

				textbox = {
					text = "[GetTrendIcon(Building.GetCashReservesTrend)]"
					autoresize = yes
					align = nobaseline
					parentanchor = center
					using = fontsize_large
				}
			}
		}
	}
}