NGame = {
	START_DATE = "2036.1.1" 
	END_DATE = "2236.1.1" 
}

@breakout_pop_growth = 0.0025	#基础出生率
@breakout_max_mortality = 0.00333 #基础死亡率 #4%，成人平均寿命25

#各分段关键点死亡率
@breakout_sol_equilibrium = 8
@breakout_mortality_at_equilibrium = 0.00208  #2.5%，成人平均寿命40

@breakout_sol_delta_cap = 25
@breakout_mortality_at_delta_cap = 0.00119 #1.428%，成人平均寿命70

@breakout_sol_cap = 60
@breakout_mortality_at_cap = 0.001 #1.2%,平均寿命83	

NPops = {
	#以下数值的单位均为月，而游戏中显示的是年

	POP_GROWTH_MAX_BIRTHRATE = @breakout_pop_growth				
	#基础出生率
	POP_GROWTH_BIRTHRATE_AT_DELTA_CAP = @[breakout_pop_growth*0.99]
	#拐点出生率
	POP_GROWTH_MIN_BIRTHRATE = @[breakout_pop_growth*0.98]			
	#饱和点出生率
	POP_GROWTH_BIRTHRATE_REDUCTION_PER_SOL = 0
	#出生率下降斜率

	POP_GROWTH_MAX_MORTALITY = @breakout_max_mortality
	#基础死亡率

	POP_GROWTH_STARVING_SLOPE = @[(breakout_mortality_at_equilibrium-breakout_max_mortality)/breakout_sol_equilibrium]
	#平衡点前死亡率斜率
	POP_GROWTH_SOL_EQUILIBRIUM = @breakout_sol_equilibrium
	#平衡点
	POP_GROWTH_MORTALITY_AT_EQUILIBRIUM = @breakout_mortality_at_equilibrium
	#平衡点死亡率
	
	POP_GROWTH_IMPROVING_SLOPE = @[(breakout_mortality_at_delta_cap-breakout_mortality_at_equilibrium)/(breakout_sol_delta_cap-breakout_sol_equilibrium)]
	#拐点前死亡率斜率
	POP_GROWTH_IMPROVING_INTERCEPT = @[breakout_mortality_at_delta_cap-(breakout_mortality_at_delta_cap-breakout_mortality_at_equilibrium)/(breakout_sol_delta_cap-breakout_sol_equilibrium)*breakout_sol_delta_cap]
	#拐点前死亡率截距
	POP_GROWTH_SOL_DELTA_CAP = @breakout_sol_delta_cap	
	#拐点

	POP_GROWTH_FIXED_DELTA_SLOPE = @[(breakout_mortality_at_cap-breakout_mortality_at_delta_cap)/(breakout_sol_cap-breakout_sol_delta_cap)]
	#末端死亡率斜率
	POP_GROWTH_FIXED_DELTA_INTERCEPT = @[breakout_mortality_at_cap-(breakout_mortality_at_cap-breakout_mortality_at_delta_cap)/(breakout_sol_cap-breakout_sol_delta_cap)*breakout_sol_cap]
	#末端死亡率截距	
	POP_GROWTH_SOL_CAP = @breakout_sol_cap			
	#饱和点
	POP_GROWTH_MIN_MORTALITY = @breakout_mortality_at_cap				
	#保和点死亡率
	
	
	CONVERSION_RATE = 0.0						# Percentage of pops who will Convert into a different Religion each month, if eligible
	MIN_CONVERSION = 0							# If there is any conversion at least this many people will convert
	
	MIN_FERTILITY_RATE = 0.01					# Minimum fertility rate, in percent to avoid rounding errors
	MAX_FERTILITY_RATE = 0.01						# Maximum fertility rate, in percent to avoid rounding errors
	MORTALITY_COEFFICIENT = 1.5					# The greater the mortality coefficient, the smaller mortality is suffered
	FERTILITY_DIVISOR = 0.03						# Fraction of minimum fertility that is the minimum mortality value at max Standard of Living
	
	WORKING_ADULT_RATIO_BASE = 0.50				# Base ratio of working adults to dependents, this can be overridden by pop type definition and country modifiers.
	WORKING_ADULT_RATIO_SKEW_MAXIMUM = 2.0		# When the ratio of working adults to dependents is skewed, it tends to correct itself, this value clamps the maximum effect of this
	DEPENDENT_CONSUMPTION_RATIO = 0.8			# Dependents consume this multiple of Needs compared to Working Adults
	
	SUBSISTENCE_DIVIDENDS_MULT = 0.5
	SUBSISTENCE_MARKET_CONSUMPTION_RATIO = 0.10	# The portion of Peasant buy packages that are added as state region consumption.
	
	
	LOW_POP_THRESHOLD = 5000					# If a state has less than this amount of pops per arable land, apply the low pop modifier
	HIGH_POP_THRESHOLD = 1000000					# If a state has more than this amount of pops per arable land, apply the high pop modifier
	
	MIGRATION_PULL_EMPTY_STATE = 100				# If a state has no pops at all, give it a huge migration pull
	MIGRATION_PULL_FROM_LIVING_STANDARD = 1			# Migration pull from each point of average living standard in target state	
	MIGRATION_PULL_UNEMPLOYMENT_POPS_MIN = 1000000 		# At less than this in number of unemployed pops, do not apply unemployment divisor
	MIGRATION_PULL_UNEMPLOYMENT_POPS_FOR_MAX_DIV = 5000000 # Num unemployed pops to apply max amount of unemployment divisor
	MIGRATION_PULL_UNEMPLOYMENT_DIV = 5				# At above max unemployed pops, migration pull is divided by this
	
	# The below factors are applied *after* migration pull threshold checks, so they only impact how large a share of migration a state gets
	MIGRATION_PULL_MULT_FROM_CULTURE_TARGET = 20.0			# Migration pull multiplied by this from target state being a cultural migration target
	MIGRATION_PULL_MULT_FROM_CULTURE_TARGET_ADJACENCY = 5.0	# Migration pull multiplied by this from target state being next to a cultural migration target
	MIGRATION_PULL_MULT_FROM_NO_DISCRIMINATION = 1.0		# Migration pull multiplier increased by this if pop is moving from discrimination to no discrimination (not applied to mass migration targets)
	MIGRATION_PULL_MULT_FROM_HOMELANDS = 0.5				# Migration pull  multiplier increased by this if pop is moving to cultural homelands (not applied to mass migration targets)
	
	# General factors for how many pops will migrate
	MIGRATION_PULL_HIGH_THRESHOLD = 1.25						#	State must have a migration pull of at least market average * this to get economic immigration
	MIGRATION_PULL_LOW_THRESHOLD = 0.75							# State must have a migration pull of less or equal than market average * this to get full amount of emigration
	ECONOMIC_MIGRATION_BASE = 0.05								# Base amount of a pop that wants to move for economic reasons
	ECONOMIC_MIGRATION_FROM_SOL_DIFFERENCE = 0.05				# Each point of difference of pop SoL to the market's average SoL makes this fraction of the pop want to economically migrate (in %)
	ECONOMIC_MIGRATION_STATE_POPULATION_THRESHOLD = 10000				# States with less pops than this have reduced economic emigration numbers to avoid total depopulation
	CULTURAL_MIGRATION_BASE = 0.02								# Base amount of a pop that wants to move due to mass migration
	CULTURAL_MIGRATION_FROM_RADICALS = 0.02						# At 100% radicals, this fraction of the pop wants to mass migrate
	MIGRATION_UNEMPLOYMENT_MULT = 10.0							# Amount of migration from SoL is increased by this when a pop is unemployed
	MIGRATION_MIN_STATE_POPS = 2000							# A state with less pops than this will not get emigration
	MIGRATION_MIN_POP_AMOUNT = 1								# No less than this amount of a pop can migrate each week (if any migration at all should happen)
	MIGRATION_MAX_POP_AMOUNT = 10000							# No more than this amount of a pop can migrate each week
	MIGRATION_MAX_PER_STATE_BASE = 1000							# No more than this amount of people can move from or to a state in a single week (base)	
	MIGRATION_MAX_PER_STATE_INFRASTRUCTURE = 10					# No more than this amount of people can move from or to a state in a single week (scales with infrastructure)
	MIGRATION_MAX_PER_STATE_UNEMPLOYMENT_ORIGIN_FRACTION = 0.01	# The amount of unemployed workers in a state * this value is added to how many people can move from it
	MIGRATION_MAX_PER_STATE_UNEMPLOYMENT_TARGET_FRACTION = 0.01	# The amount of unemployed workers in a state * this value is removed from how many people can move to it
	MIGRATION_MAX_PER_STATE_CULTURAL_MIGRATION_MULT = 5.0		# Weekly migration caps are multiplied by this amount by this for cultural-type migration
	MIGRATION_AVERAGE_ATTRACTION_EMIGRATION_MULT = 0.25			# States with an average migration attraction gets this multiplier to emigrants
	
} 
NEconomy = {
	COUNTRY_MIN_CREDIT_BASE = 10000			# Added to the total Building Cash Reserves to determine credit limit (base)
	COUNTRY_MIN_CREDIT_SCALED = 0.00001 			# Added to the total Building Cash Reserves to determine credit limit (multiplied by GDP)

	ECONOMY_OF_SCALE_MAX_MULTIPLIER = 25				# Beyond this many building levels, do not apply further economy of scale bonuses
	ECONOMY_OF_SCALE_START_LEVEL = 11					# Level at which buildings start getting economy of scale bonuses. Levels lower than this value provide no bonus [>=1]
	
	
	POLLUTION_TARGET_DIVISOR_BASE = 1					# Base value to divide total pollution generation by for calculating state region pollution target level
	POLLUTION_TARGET_DIVISOR_ARABLE_LAND_MULT = 0.1		# Amount per arable land to add to pollution divisor
	POLLUTION_CHANGE_SPEED = 0.5						# Each day, pollution in state region changes by this amount towards target
	POLLUTION_MAX = 255
	POLLUTION_SPREAD_TO_NEIGHBOR = 0.25					# Adjacent state regions always have at least this much of their neighbor's pollution level
	
	
	MIN_GOODS_PRICE	= 0.1							# A good cannot have a lower base price than this
	PRICE_RANGE = 0.99   						# min price of a good is base * (1 - PRICE_RANGE), Max price is base * (1 + PRICE_RANGE), PRICE_RANGE is locked to [0-1]
	BUY_SELL_DIFF_AT_MAX_FACTOR = 3				# the difference between buy/consumption and sell/production at min/max pricing, e.g. if set to 4 then if buy orders are 4x sell orders price is maxed
	GOODS_SHORTAGE_PENALTY_THRESHOLD = 0.30		# If supply / demand is lower than this, start applying output penalties, by default this should be ( 1 / BUY_SELL_DIFF_AT_MAX_FACTOR )
	GOODS_SHORTAGE_PENALTY_INCREASE_SPEED = 0.01  	# Goods shortage penalty increases by this fraction of the target each day
    GOODS_SHORTAGE_PENALTY_DECREASE_SPEED = 0.02  	# Goods shortage penalty goes down by this fraction of GOODS_SHORTAGE_PENALTY_MAX each day
    GOODS_SHORTAGE_PENALTY_MIN = 0.05			# Goods shortage penalty can't be lower than this if there is any shortage
	GOODS_SHORTAGE_PENALTY_MAX = 0.99			# Goods shortage penalty can't be higher than this
	
	BUILDING_INITIAL_WAGE_WEEKS = 2				# A building will not adjust its wages for the first this many weeks of its existence
	MAX_WAGE_STEP_CHANGE = 0.1					# Wage rates can change at most this much each week
	SUBSIDIES_MIN_GAIN = 100						# If a building is subsidized, it will always collect enough subsidies to ensure at least this weekly cash reserve growth
	HIRING_RATE = 0.1 							# Max number of laborers we’re allowed a building to hire or fire each market update
	EMPLOYMENT_PROPORTIONALITY_LIMIT = 0.02		# A building cannot have a difference of ratio of full employment between any two professions greater than this limit
	BUILDING_INIT_PROFIT_TARGET_MIN = 0.10 		# Minimum % income a building wants to have as profit during initialization (will decrease wages towards this)
	BUILDING_INIT_PROFIT_TARGET_MAX = 0.20 		# Maximum % income a building wants to have as profit during initialization (will increase wages towards this)
	BUILDING_PROFIT_TARGET_TO_RAISE_WAGES = 0.2	# Required profit margin raise wages no matter what, with BUILDING_WEEKS_BETWEEN_PAY_RAISES weeks cooldown
	BUILDING_WEEKS_BETWEEN_PAY_RAISES = 26		# Cooldown between pay raises no matter what
	MIN_RAISE_TO_HIRE = 0.10					# The minimum required increase in wages for an employee to switch jobs (1.0 = +100% = x2)

	BASE_RESOURCE_DISCOVER_CHANCE = 0.02 		# Per day (1.0 = 1%)
	EMPLOYMENT_RESOURCE_DEPLETE_CHANCE = 0.001	# Multiplied by number of fully employed levels of the building
	DEFAULT_RESOURCE_DISCOVER_MIN_AMOUNT = 2	# Min amount of resources that will be discovered for each successful roll
	DEFAULT_RESOURCE_DISCOVER_MAX_AMOUNT = 4	# Max amount of resources that will be discovered for each successful roll	
	FULLY_DISCOVERED_RESOURCE_DEPLETE_CHANCE_MULT = 1.0 # The chance of a resource depleting is multiplied by this when all of the resource has been discovered
	DEFAULT_RESOURCE_DEPLETE_MIN_AMOUNT = 2		# Min amount of resources that will be depleted for each successful roll
	DEFAULT_RESOURCE_DEPLETE_MAX_AMOUNT = 4		# Max amount of resources that will be depleted for each successful roll	
		
	IN_DEFAULT_MINIMUM_PENALTY_SCALE = 0.05				# This amount of the 'in default' throughput penalty is applied right away
	IN_DEFAULT_DAYS_TO_FULL_PENALTY = 365				# How many days of being in default does it take to get the full throughput penalty
	DECLARE_BANKRUPTCY_PENALTY_DURATION_YEARS = 10		# How many years does it take for penalties from declaring bankruptcy to fully decay
	DECLARE_BANKRUPTCY_RADICALIZATION_SHARES_FACTOR = 0.9 # For each per-pop shares in their building, radicalize this percentage of a pop on 
}
#开局镜头位置
NFrontend = {
	CAMERA_START_X = 200.0						# Initial position in main menu
	CAMERA_START_Y = 2400							# Y is height
	CAMERA_START_Z = 2000.0
}
