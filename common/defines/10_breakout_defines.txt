NGame = {
	START_DATE = "2036.1.1" 
	END_DATE = "2236.1.1" 
}

@breakout_pop_growth = 0.0025	#基础出生率
@breakout_max_mortality = 0.00333 #基础死亡率 #4%，成人平均寿命25

#各分段关键点死亡率
@breakout_sol_equilibrium = 10
@breakout_mortality_at_equilibrium = 0.00208  #2.5%，成人平均寿命40

@breakout_sol_delta_cap = 30
@breakout_mortality_at_delta_cap = 0.00119 #1.428%，成人平均寿命70

@breakout_sol_cap = 60
@breakout_mortality_at_cap = 0.001 #1.2%,平均寿命83	

NPops = {
	#以下数值的单位均为月，而游戏中显示的是年

	POP_GROWTH_MAX_BIRTHRATE = @breakout_pop_growth				
	#基础出生率
	POP_GROWTH_BIRTHRATE_AT_DELTA_CAP = @[breakout_pop_growth*0.99]
	#拐点出生率
	POP_GROWTH_MIN_BIRTHRATE = @[breakout_pop_growth*0.98]			
	#饱和点出生率
	POP_GROWTH_BIRTHRATE_REDUCTION_PER_SOL = 0
	#出生率下降斜率

	POP_GROWTH_MAX_MORTALITY = @breakout_max_mortality
	#基础死亡率

	POP_GROWTH_STARVING_SLOPE = @[(breakout_mortality_at_equilibrium-breakout_max_mortality)/breakout_sol_equilibrium]
	#平衡点前死亡率斜率
	POP_GROWTH_SOL_EQUILIBRIUM = @breakout_sol_equilibrium
	#平衡点
	POP_GROWTH_MORTALITY_AT_EQUILIBRIUM = @breakout_mortality_at_equilibrium
	#平衡点死亡率
	
	POP_GROWTH_IMPROVING_SLOPE = @[(breakout_mortality_at_delta_cap-breakout_mortality_at_equilibrium)/(breakout_sol_delta_cap-breakout_sol_equilibrium)]
	#拐点前死亡率斜率
	POP_GROWTH_IMPROVING_INTERCEPT = @[breakout_mortality_at_delta_cap-(breakout_mortality_at_delta_cap-breakout_mortality_at_equilibrium)/(breakout_sol_delta_cap-breakout_sol_equilibrium)*breakout_sol_delta_cap]
	#拐点前死亡率截距
	POP_GROWTH_SOL_DELTA_CAP = @breakout_sol_delta_cap	
	#拐点

	POP_GROWTH_FIXED_DELTA_SLOPE = @[(breakout_mortality_at_cap-breakout_mortality_at_delta_cap)/(breakout_sol_cap-breakout_sol_delta_cap)]
	#末端死亡率斜率
	POP_GROWTH_FIXED_DELTA_INTERCEPT = @[breakout_mortality_at_cap-(breakout_mortality_at_cap-breakout_mortality_at_delta_cap)/(breakout_sol_cap-breakout_sol_delta_cap)*breakout_sol_cap]
	#末端死亡率截距	
	POP_GROWTH_SOL_CAP = @breakout_sol_cap			
	#饱和点
	POP_GROWTH_MIN_MORTALITY = @breakout_mortality_at_cap				
	#保和点死亡率
	
	
	#物种改造系统暂时取消
	ASSIMILATION_RATE = 0.2					# Percentage of pops who will Assimilate into a different Culture each month, if eligible
	MIN_ASSIMILATION = 1000						# If there is any assmiliation at least this many people will assimilate
	CONVERSION_RATE = 0.2						# Percentage of pops who will Convert into a different Religion each month, if eligible
	MIN_CONVERSION = 1000							# If there is any conversion at least this many people will convert
	
	#劳动力比例
	WORKING_ADULT_RATIO_BASE = 0.50				# Base ratio of working adults to dependents, this can be overridden by pop type definition and country modifiers.
	WORKING_ADULT_RATIO_SKEW_MAXIMUM = 2.0		# When the ratio of working adults to dependents is skewed, it tends to correct itself, this value clamps the maximum effect of this
	DEPENDENT_CONSUMPTION_RATIO = 0.8			# Dependents consume this multiple of Needs compared to Working Adults
	SUBSISTENCE_DIVIDENDS_MULT = 0.5
	SUBSISTENCE_MARKET_CONSUMPTION_RATIO = 0.10	# The portion of Peasant buy packages that are added as state region consumption.
	
	#移除人口过多或过少的修正
	LOW_POP_THRESHOLD = 5000					# If a state has less than this amount of pops per arable land, apply the low pop modifier
	HIGH_POP_THRESHOLD = 1000000					# If a state has more than this amount of pops per arable land, apply the high pop modifier
	
	#移民相关修正，鼓励经济移民
	MIGRATION_PULL_EMPTY_STATE = 100				# If a state has no pops at all, give it a huge migration pull
	MIGRATION_PULL_FROM_LIVING_STANDARD = 1			# Migration pull from each point of average living standard in target state	
	MIGRATION_PULL_UNEMPLOYMENT_POPS_MIN = 1000000 		# At less than this in number of unemployed pops, do not apply unemployment divisor
	MIGRATION_PULL_UNEMPLOYMENT_POPS_FOR_MAX_DIV = 5000000 # Num unemployed pops to apply max amount of unemployment divisor
	MIGRATION_PULL_UNEMPLOYMENT_DIV = 5				# At above max unemployed pops, migration pull is divided by this
	
	# The below factors are applied *after* migration pull threshold checks, so they only impact how large a share of migration a state gets
	MIGRATION_PULL_MULT_FROM_CULTURE_TARGET = 20.0			# Migration pull multiplied by this from target state being a cultural migration target
	MIGRATION_PULL_MULT_FROM_CULTURE_TARGET_ADJACENCY = 5.0	# Migration pull multiplied by this from target state being next to a cultural migration target
	MIGRATION_PULL_MULT_FROM_NO_DISCRIMINATION = 1.0		# Migration pull multiplier increased by this if pop is moving from discrimination to no discrimination (not applied to mass migration targets)
	MIGRATION_PULL_MULT_FROM_HOMELANDS = 0.5				# Migration pull  multiplier increased by this if pop is moving to cultural homelands (not applied to mass migration targets)
	
	# General factors for how many pops will migrate
	MIGRATION_PULL_HIGH_THRESHOLD = 1.25						#	State must have a migration pull of at least market average * this to get economic immigration
	MIGRATION_PULL_LOW_THRESHOLD = 0.75							# State must have a migration pull of less or equal than market average * this to get full amount of emigration
	ECONOMIC_MIGRATION_BASE = 0.05								# Base amount of a pop that wants to move for economic reasons
	ECONOMIC_MIGRATION_FROM_SOL_DIFFERENCE = 0.05				# Each point of difference of pop SoL to the market's average SoL makes this fraction of the pop want to economically migrate (in %)
	ECONOMIC_MIGRATION_STATE_POPULATION_THRESHOLD = 10000				# States with less pops than this have reduced economic emigration numbers to avoid total depopulation
	CULTURAL_MIGRATION_BASE = 0.02								# Base amount of a pop that wants to move due to mass migration
	CULTURAL_MIGRATION_FROM_RADICALS = 0.02						# At 100% radicals, this fraction of the pop wants to mass migrate
	MIGRATION_UNEMPLOYMENT_MULT = 10.0							# Amount of migration from SoL is increased by this when a pop is unemployed
	MIGRATION_MIN_STATE_POPS = 2000							# A state with less pops than this will not get emigration
	MIGRATION_MIN_POP_AMOUNT = 1								# No less than this amount of a pop can migrate each week (if any migration at all should happen)
	MIGRATION_MAX_POP_AMOUNT = 10000							# No more than this amount of a pop can migrate each week
	MIGRATION_MAX_PER_STATE_BASE = 1000							# No more than this amount of people can move from or to a state in a single week (base)	
	MIGRATION_MAX_PER_STATE_INFRASTRUCTURE = 10					# No more than this amount of people can move from or to a state in a single week (scales with infrastructure)
	MIGRATION_MAX_PER_STATE_UNEMPLOYMENT_ORIGIN_FRACTION = 0.01	# The amount of unemployed workers in a state * this value is added to how many people can move from it
	MIGRATION_MAX_PER_STATE_UNEMPLOYMENT_TARGET_FRACTION = 0.01	# The amount of unemployed workers in a state * this value is removed from how many people can move to it
	MIGRATION_MAX_PER_STATE_CULTURAL_MIGRATION_MULT = 5.0		# Weekly migration caps are multiplied by this amount by this for cultural-type migration
	MIGRATION_AVERAGE_ATTRACTION_EMIGRATION_MULT = 0.25			# States with an average migration attraction gets this multiplier to emigrants
	
} 
NEconomy = {
	#减少GDP波动带来的信贷额修正
	COUNTRY_MIN_CREDIT_BASE = 10000			# Added to the total Building Cash Reserves to determine credit limit (base)
	COUNTRY_MIN_CREDIT_SCALED = 0.00001 			# Added to the total Building Cash Reserves to determine credit limit (multiplied by GDP)

	#规模效应
	ECONOMY_OF_SCALE_START_LEVEL = 2					# Level at which buildings start getting economy of scale bonuses. Levels lower than this value provide no bonus [>=1]
	TRADE_ROUTE_ECONOMY_OF_SCALE = 0.25					# Each level of trade route after the first adds this % to desired trade quantity
	TRADE_ROUTE_ECONOMY_OF_SCALE_MAX_LEVEL = 20			# After this level, trade route economy of scale no longer increases the amount per level
	
	#商品供需系统	
	MIN_GOODS_PRICE	= 0.1							# A good cannot have a lower base price than this
	PRICE_RANGE = 0.90   						# min price of a good is base * (1 - PRICE_RANGE), Max price is base * (1 + PRICE_RANGE), PRICE_RANGE is locked to [0-1]
	BUY_SELL_DIFF_AT_MAX_FACTOR = 3				# the difference between buy/consumption and sell/production at min/max pricing, e.g. if set to 4 then if buy orders are 4x sell orders price is maxed
	GOODS_SHORTAGE_PENALTY_THRESHOLD = 0.30		# If supply / demand is lower than this, start applying output penalties, by default this should be ( 1 / BUY_SELL_DIFF_AT_MAX_FACTOR )
	GOODS_SHORTAGE_PENALTY_INCREASE_SPEED = 0.01  	# Goods shortage penalty increases by this fraction of the target each day
    GOODS_SHORTAGE_PENALTY_DECREASE_SPEED = 0.02  	# Goods shortage penalty goes down by this fraction of GOODS_SHORTAGE_PENALTY_MAX each day
    GOODS_SHORTAGE_PENALTY_MIN = 0.05			# Goods shortage penalty can't be lower than this if there is any shortage
	GOODS_SHORTAGE_PENALTY_MAX = 0.99			# Goods shortage penalty can't be higher than this
	
	#尝试修改工资系统，没有成功
	BUILDING_INITIAL_WAGE_WEEKS = 2				# A building will not adjust its wages for the first this many weeks of its existence
	MAX_WAGE_STEP_CHANGE = 0.1					# Wage rates can change at most this much each week
	SUBSIDIES_MIN_GAIN = 100						# If a building is subsidized, it will always collect enough subsidies to ensure at least this weekly cash reserve growth
	HIRING_RATE = 0.1 							# Max number of laborers we’re allowed a building to hire or fire each market update
	EMPLOYMENT_PROPORTIONALITY_LIMIT = 0.02		# A building cannot have a difference of ratio of full employment between any two professions greater than this limit
	BUILDING_INIT_PROFIT_TARGET_MIN = 1 		# Minimum % income a building wants to have as profit during initialization (will decrease wages towards this)
	BUILDING_INIT_PROFIT_TARGET_MAX = 2 		# Maximum % income a building wants to have as profit during initialization (will increase wages towards this)
	BUILDING_PROFIT_TARGET_TO_RAISE_WAGES = 1.0	# Required profit margin raise wages no matter what, with BUILDING_WEEKS_BETWEEN_PAY_RAISES weeks cooldown
	BUILDING_WEEKS_BETWEEN_PAY_RAISES = 52		# Cooldown between pay raises no matter what
	MIN_RAISE_TO_HIRE = 0.01					# The minimum required increase in wages for an employee to switch jobs (1.0 = +100% = x2)
	STARTING_WAGE_RATE_MULTIPLIER = 2.0			# Starting wage rate is multiplied by this (for easy balancing)
	NORMAL_WAGE_RATE_FALLBACK = 50.0			# If it's impossible to compute a normal wage rate (e.g. if every incorporated pop works in government buildings) set it to this (weekly £ per POP_SIZE_PACKAGE employees)
	MINIMUM_WAGE_RATE = 1.0					# The wage rate can never drop below this, no matter what (weekly £ per POP_SIZE_PACKAGE employees)
	MAXIMUM_WAGE_RATE = 10000.0				# The absolute maximum that a building's wage rate can be increased to.
	PEASANT_STARTING_WAGE_RATE_FACTOR = 0.5		# For the sake of calculating starting normal wages, treat peasants as having this pop type wage multiplier
	
	#解雇相关
	BUILDING_LAYOFFS_MIN_WEEKS_BETWEEN = 2		# Minimum number of weeks between layoffs
	BUILDING_LAYOFFS_DECREASE_BY = 0.05			# The ratio that layoffs will reduce employment by (e.g. 0.15 means if you're currently 57% employed, reduce that to 48.45%)

	#资金储备相关
	BUILDING_CASH_RESERVES_HIGH_ROI = 0.25			# A ROI (return on investment) at or above this value is considered "high". In this context ROI means how much more money a building makes compared to how much it spends. Must be >= BUILDING_CASH_RESERVES_MED_ROI.
	BUILDING_CASH_RESERVES_MED_ROI = 0.15			# A ROI (return on investment) at exactly this value is considered "medium". In this context ROI means how much more money a building makes compared to how much it spends. Must be >= BUILDING_CASH_RESERVES_LOW_ROI.
	BUILDING_CASH_RESERVES_LOW_ROI = 0.05			# A ROI (return on investment) at or below this value is considered "low". In this context ROI means how much more money a building makes compared to how much it spends. Must be > 0.

	BUILDING_CASH_RESERVES_FILL_TIME_HIGH_ROI = 13	# Base number of weeks to fill a building's cash reserves when ROI is high. Final number of weeks is directly interpolated if ROI is between medium and high. Must be > 0.
	BUILDING_CASH_RESERVES_FILL_TIME_MED_ROI = 26	# Base number of weeks to fill a building's cash reserves when ROI is medium. Must be > 0.
	BUILDING_CASH_RESERVES_FILL_TIME_LOW_ROI = 52	# Base number of weeks to fill a building's cash reserves when ROI is low. Final number of weeks is directly interpolated if ROI is between low and medium. Must be > 0.
	
	BUILDING_CASH_RESERVES_MIN_DEPOSIT_PERCENT = 0.25	# The minimum percentage of weekly profits that building owners will try to deposit into a building's cash reserves. Must be >= 0.
	BUILDING_CASH_RESERVES_MAX_DEPOSIT_PERCENT = 0.75	# The maximum percentace of weekly profits that building owners will try to deposit into a building's cash reserves. Must be >= BUILDING_CASH_RESERVES_MIN_DEPOSIT_PERCENT

	BUILDING_CASH_RESERVES_ALGO = 1					# Temporary. Algorithm to use when deciding how owners split profits between cash reserves and dividends. 1 = complex algo, 2 = simple one
	
	BUILDING_CASH_RESERVES_STATUS_QUO_THRESHOLD = 0.99	# If cash reserves are above this fraction of max, buildings won't try to reduce expenses even if they are losing money	
	
	#资源系统
	BASE_RESOURCE_DISCOVER_CHANCE = 0.02 		# Per day (1.0 = 1%)
	EMPLOYMENT_RESOURCE_DEPLETE_CHANCE = 0.001	# Multiplied by number of fully employed levels of the building
	DEFAULT_RESOURCE_DISCOVER_MIN_AMOUNT = 2	# Min amount of resources that will be discovered for each successful roll
	DEFAULT_RESOURCE_DISCOVER_MAX_AMOUNT = 4	# Max amount of resources that will be discovered for each successful roll	
	FULLY_DISCOVERED_RESOURCE_DEPLETE_CHANCE_MULT = 1.0 # The chance of a resource depleting is multiplied by this when all of the resource has been discovered
	DEFAULT_RESOURCE_DEPLETE_MIN_AMOUNT = 2		# Min amount of resources that will be depleted for each successful roll
	DEFAULT_RESOURCE_DEPLETE_MAX_AMOUNT = 4		# Max amount of resources that will be depleted for each successful roll	
		
	#债务违约相关
	IN_DEFAULT_MINIMUM_PENALTY_SCALE = 0.05				# This amount of the 'in default' throughput penalty is applied right away
	IN_DEFAULT_DAYS_TO_FULL_PENALTY = 365				# How many days of being in default does it take to get the full throughput penalty
	DECLARE_BANKRUPTCY_PENALTY_DURATION_YEARS = 10		# How many years does it take for penalties from declaring bankruptcy to fully decay
	DECLARE_BANKRUPTCY_RADICALIZATION_SHARES_FACTOR = 0.9 # For each per-pop shares in their building, radicalize this percentage of a pop on 

	#参考了licy18的《贸易收入下降时贸易路线不会升级》，为贸易路线等级添加了阻尼
	TRADE_ROUTE_AUTO_INCREASE_ACCEPTABLE_REVENUE_DIFFERENCE = 1.0 # Multiply revenue of new trade route level by this for the purpose of considering whether it's OK to auto-increase level
	TRADE_ROUTE_AUTO_REDUCTION_ACCEPTABLE_REVENUE_DIFFERENCE = 1.01 # Multiply revenue of current trade route level by this for the purpose of considering whether we should auto-decrease level 


	#航运系统
	SHIPPING_LANE_CONVOY_COST_SCALING = 0.01			# The cost for a shipping lane for each node beyond the first. So at 0.1 it goes 1.0, 1.1, 1.2 and so on.
	GOODS_DEFAULT_CONVOY_COST_MULTIPLIER = 1			# The convoy cost of shipping a single unit of goods (can be overriden in defines)

}

NPolitics = {
	STATE_BUREAUCRACY_BASE_COST = 10		# The base cost per incorporated state
	STATE_BUREAUCRACY_POP_BASE_COST = 2		# The base BUR multiplier per population multiple
	STATE_BUREAUCRACY_POP_MULTIPLE = 100000	# Number of people BUR cost is based on
	MINIMUM_INVESTMENT_COST = 10			# The absolute minimum cost in BUR per investment level
}
#开局镜头位置，指向西太平洋
NFrontend = {
	CAMERA_START_X = 200.0						# Initial position in main menu
	CAMERA_START_Y = 2400							# Y is height
	CAMERA_START_Z = 2000.0
}
#防止AI一直不议和
NWar = {
	DEVASTATION_MAX = 100.0
	DEVASTATION_INCREASE_RATE = 0.01 # Per day, scales with level of occupation
	DEVASTATION_DECAY_RATE = -0.1 # Per day, when there are no occupations
	DEVASTATION_FROM_BATTLES = 1.0 # For each battle

	AUTO_CAPITULATE_WAR_SUPPORT = 0 # When war support is this low, the country will auto capitulate
	DAYS_BETWEEN_WAR_EXHAUSTION = 20 # Every this many days war support will be reduced by the war exhaustion formula
}
NAI = {
	#宿敌花费
	MONEY_SPENDING_LAND_THREAT_THRESHOLD = 1.5 # If a hostile country has a more than this much larger army than AI does, it wants to increase military spending
	MONEY_SPENDING_NAVY_THREAT_THRESHOLD = 1.5 # If a hostile country has a more than this much larger navy than AI does, it wants to increase military spending
	MONEY_SPENDING_PRESTIGE_RIVAL_THRESHOLD = 1.5 # If a rival has this much more prestige than AI does, it wants to increase spending on art academies
	MONEY_SPENDING_TECH_RIVAL_THRESHOLD = 1.0 # If a rival has this much more weekly innovation than AI does, it wants to increase spending on universities

	#一般建设
	CONSTRUCTION_MAX_NUM_NON_GOVERNMENT_CONSTRUCTIONS_BASE = 1 # If country has this number of non-government building constructions queued, don't add anymore (base)
	CONSTRUCTION_MAX_NUM_NON_GOVERNMENT_CONSTRUCTIONS_SCALED = 0.05 # If country has this number of non-government building constructions queued, don't add anymore (scaled by construction production)
	CONSTRUCTION_MAX_NUM_NON_GOVERNMENT_CONSTRUCTIONS_SCALED_MAX = 49 # CONSTRUCTION_MAX_NUM_NON_GOVERNMENT_CONSTRUCTIONS_SCALED can't be higher than this	
	CONSTRUCTION_MAX_NUM_GOVERNMENT_CONSTRUCTIONS_BASE = 1 # If country has this number of government building constructions queued, don't add anymore (base)
	CONSTRUCTION_MAX_NUM_GOVERNMENT_CONSTRUCTIONS_SCALED = 0.02 # If country has this number of government building constructions queued, don't add anymore (scaled by construction production)
	CONSTRUCTION_MAX_NUM_GOVERNMENT_CONSTRUCTIONS_SCALED_MAX = 9 # CONSTRUCTION_MAX_NUM_GOVERNMENT_CONSTRUCTIONS_SCALED can't be higher than this	
	CONSTRUCTION_WANTED_SUPPLY_OF_CONSTRUCTION_GOODS = 1.0 # Try to import construction goods if supply-to-demand ratio is below this

	CONSTRUCTION_RESERVES_NEW_CONSTRUCTIONS = 0.01 # If gold reserves are less than this after adding the cost of a new construction, don't queue it
	CONSTRUCTION_DEBT_RESUME = 0.4 # If constructions are paused, resume once debt is this low relative to ceiling
	CONSTRUCTION_DEBT_PAUSE = 0.5 # If in this much relative debt to debt ceiling, pause all non-critical constructions 	
	CONSTRUCTION_DEBT_RESUME_CRITICAL_CONSTRUCTION = 0.6 # If critical constructions are paused, resume once debt is this low relative to ceiling
	CONSTRUCTION_DEBT_PAUSE_CRITICAL_CONSTRUCTION = 0.7 # If in this much relative debt to debt ceiling, pause all critical constructions 	

	#AI建设开支
	# Below data is used to calculate how much weight the AI places on different things it can spend its weekly money income on
	MONEY_SPENDING_RANDOM_FACTOR = 1.0 # The higher this is, the more random new AI money spending will be
	MONEY_SPENDING_MAX_RATIO_TO_REMOVE_SHOULD_HAVE = 1.00 # How low of a income-to-expenses ratio does the AI need to have to consider reducing spending on a 'should-have'
	MONEY_SPENDING_MAX_RATIO_TO_REMOVE_WANTS_TO_HAVE = 1.10 # How low of a income-to-expenses ratio does the AI need to have to consider reducing spending on a 'wants-to-have'
	MONEY_SPENDING_MAX_RATIO_TO_REMOVE_NICE_TO_HAVE = 1.20 # How low of a income-to-expenses ratio does the AI need to have to consider reducing spending on a 'nice-to-have'
	MONEY_SPENDING_MIN_RATIO_TO_ADD_SHOULD_HAVE = 1.2 # How much of a income-to-expenses ratio does AI want to have after increasing spending for a 'should-have' project 
	MONEY_SPENDING_MIN_RATIO_TO_ADD_WANTS_TO_HAVE = 1.3 # How much of a income-to-expenses ratio does AI want to have after increasing spending for a 'wants-to-have' project
	MONEY_SPENDING_MIN_RATIO_TO_ADD_NICE_TO_HAVE = 1.4 # How much of a income-to-expenses ratio does AI want to have after increasing spending for a 'nice-to-have' project
	MONEY_SPENDING_MIN_SURPLUS_TO_ADD_SHOULD_HAVE = 2000 # How much of a surplus in absolute money does AI want to have after increasing spending for a 'should-have' project
	MONEY_SPENDING_MIN_SURPLUS_TO_ADD_WANTS_TO_HAVE = 5000 # How much of a surplus in absolute money does AI want to have after increasing spending for a 'wants-to-have' project
	MONEY_SPENDING_MIN_SURPLUS_TO_ADD_NICE_TO_HAVE = 10000 # How much of a surplus in absolute money does AI want to have after increasing spending for a 'nice-to-have' project
	MONEY_SPENDING_MIN_SURPLUS_TO_ALWAYS_ADD_SHOULD_HAVE = 25000 # If AI has this surplus in absolute money, it's always fine to increase spending on a 'should-have' project, regardless of income ratio
	MONEY_SPENDING_MIN_SURPLUS_TO_ALWAYS_ADD_WANTS_TO_HAVE = 50000 # If AI has this surplus in absolute money, it's always fine to increase spending on a 'wants-to-have' project, regardless of income ratio
	MONEY_SPENDING_MIN_SURPLUS_TO_ALWAYS_ADD_NICE_TO_HAVE = 100000 # If AI has this surplus in absolute money, it's always fine to increase spending on a 'nice-to-have' project, regardless of income ratio
	MONEY_SPENDING_ACCEPTABLE_WAR_DEBT = 0.5 # If the AI has less than this % debt to ceiling, avoid doing cost-cutting at war for 'wants to have' and above
	MONEY_SPENDING_MIN_RATIO_TO_CONSIDER_GOLD_RESERVES = 0.7 # How low of a income-to-expenses ratio does the AI need to have to try to cut spending regardless of how plentiful its gold reserves are (when at peace)
	MONEY_SPENDING_MIN_WEEKS_OF_GOLD_RESERVES_TO_NOT_REMOVE_SHOULD_HAVE = 20 # If we have enough gold reserves to maintain our current spending for this long, don't decrease spending on a 'should-have'
	MONEY_SPENDING_MIN_WEEKS_OF_GOLD_RESERVES_TO_NOT_REMOVE_WANTS_TO_HAVE = 40 # If we have enough gold reserves to maintain our current spending for this long, don't decrease spending on a 'wants-to-have'
	MONEY_SPENDING_MAX_WEEKS_OF_DEBT_TO_ADD_SHOULD_HAVE = 50 # If we have so much debt it will take more than this number of weeks to pay it off, don't increase spending on a 'should-have'
	MONEY_SPENDING_MIN_GOLD_RESERVE_FRACTION_TO_ADD_WANTS_TO_HAVE = 0.1 # If we don't have at least this fraction of gold reserves, don't increase spending on a 'wants-to-have'
	MONEY_SPENDING_MIN_GOLD_RESERVE_FRACTION_TO_ADD_NICE_TO_HAVE = 0.2 # If we don't have at least this fraction of gold reserves, don't increase spending on a 'nice-to-have'

	#ai建造
	# Below data is used to calculate how much weight the AI places on a production building
	PRODUCTION_BUILDING_RANDOM_FACTOR = 10.0 # The higher this is, the more random AI construction will be
	PRODUCTION_BUILDING_BASE_VALUE = 1000 # If no ai_value is scripted in the building
	PRODUCTION_BUILDING_GOODS_PROFIT_FACTOR = 5000 # Per pound of predicted building profit (divided by employee count per level)
	PRODUCTION_BUILDING_GOODS_DEFICIT_FACTOR = 20000 # Per pound of predicted building deficit (divided by employee count per level and multiplies a negative value)
	PRODUCTION_BUILDING_MISSING_QUALIFICATIONS_MULT = 0.75 # Multiply score by this if there's not enough qualifications to staff the building (disabled for now)
	PRODUCTION_BUILDING_MISSING_INFRASTRUCTURE_DIV = 0.25 # Divide score by ( 1 + this * number of missing infrastructure after adding this building )
	PRODUCTION_BUILDING_ECONOMY_OF_SCALE_MULT = 10.0 # Multiply score by this if building uses economy of scale and it's already present in the state
}