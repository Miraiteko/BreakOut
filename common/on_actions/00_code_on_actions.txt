# For on_actions launched by the code itself.

# Root = Country
on_monthly_pulse_country = {
}

on_yearly_pulse_country = {
}

on_yearly_pulse_country = {
}
on_half_yearly_pulse_country = {
}
on_five_year_pulse_country = {
}


on_decade_pulse_country = {
}

# Root = Character
on_monthly_pulse_character = {}
on_yearly_pulse_character = {

}
on_half_yearly_pulse_character = {}
on_five_year_pulse_character = {}
on_decade_pulse_character = {
	
}

# Root = State
on_monthly_pulse_state = {

}
on_half_yearly_pulse_state = {}
on_yearly_pulse_state = {
}
on_five_year_pulse_state = {}
on_decade_pulse_state = {}

# Root = attacker or defender country
# scope:battle = battle
# scope:attacker = attacking commander
# scope:defender = defending commander
# scope:state = location state
on_battle_started = {
	effect = {
	}
}

# Root = attacker or defender country
# scope:battle = battle
# scope:attacker = attacking commander
# scope:defender = defending commander
# scope:state = location state
on_battle_ended = {}

# Root = attacker or defender country
# scope:battle = battle
# scope:attacker = attacking commander
# scope:defender = defending commander
# scope:state = location state
on_battle_won = {
}

# Root = attacker or defender country
# scope:battle = battle
# scope:attacker = attacking commander
# scope:defender = defending commander
# scope:state = location state
on_battle_lost = {}

# Root = Building
on_building_built = {
}

# Root = Building
on_start_expanding_building = {
}

# Root = Building
on_building_expanded = {
}

# Does not appear
on_deactivate_link = {
}

# Root = From Market
# scope:market = Market merging into
# scope:trade_center = Trade Center state of root
on_merge_markets = {
}

# Root = State having the link retargeted
on_retarget_link = {
}

# Root = The newly created market
on_create_market = {
}

# Root = The applicable country
# scope:technology = The technology type they started to research
on_research_technology_started = {
}

# Root = The applicable country
# scope:technology = The technology type they just acquired
on_acquired_technology = {
	effect = {
		if = {
			limit = {
				has_game_started = yes
			}
			post_notification = acquired_technology_notification
		}
		if = {
			limit = {
				is_player = yes
				has_technology_researched = pumpjacks
				NOT = { has_variable = first_oil_discovered }
			}
			set_variable = first_oil_discovered
			if = {
				limit = {
					any_scope_state = {
						has_potential_resource = bg_oil_extraction
					}
				}
				random_scope_state = {
					limit = {
						has_potential_resource = bg_oil_extraction
					}
					force_resource_discovery = bg_oil_extraction
				}
			}
			else_if = {
				limit = {
					any_country = {
						has_overlapping_interests = ROOT
						any_scope_state = {
							has_potential_resource = bg_oil_extraction
						}
					}
				}
				random_country = {
					limit = {
						has_overlapping_interests = ROOT
						any_scope_state = {
							has_potential_resource = bg_oil_extraction
						}
					}
					random_scope_state = {
						limit = {
							has_potential_resource = bg_oil_extraction
						}
						force_resource_discovery = bg_oil_extraction
					}
				}
			}
			else = {
				random_state = {
					limit = {
						has_potential_resource = bg_oil_extraction
					}
					force_resource_discovery = bg_oil_extraction
				}
			}
		}
	}
}

# Root = The applicable country
# scope:technology = The technology type that has started to spread to them
on_spreading_technology = {
	effect = {
		post_notification = spreading_technology_notification
	}
}

# Fires for all countries with an interest marker in the play's region
# Root = Country who owns the interest marker
# scope:diplomatic_play = The diplomatic play that has been started
on_diplomatic_play_started = {
	events = {
	}
}

# Root = Character
on_character_creation = {
}

# Root = Character
on_character_death = {
}

# Root = Character
on_new_ruler = {
	#
}

# Root = Country
on_country_default = {
	effect = {
		add_modifier = country_default	
	}
}

# Root = Country
on_country_no_longer_default = {
	effect = {
		remove_modifier = country_default	
	}
}

# Root = Diplomatic Action
on_diplomatic_action = {
	effect = {
		post_notification = diplomatic_action_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal = {
	effect = {
		post_proposal = proposal_diplomatic_action
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_accepted = {
	effect = {
		post_notification = diplomatic_proposal_accepted
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_owe_obligation = {
	effect = {
		post_proposal = proposal_diplomatic_action_owe_obligation
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_call_in_obligation = {
	effect = {
		post_proposal = proposal_diplomatic_action_call_in_obligation
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_declined = {
	effect = {
		post_notification = diplomatic_proposal_declined
	}
}

# Root = Diplomatic Action
on_diplomatic_action_break = {
	effect = {
		post_notification = diplomatic_action_break_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_break = {
	effect = {
		post_proposal = proposal_break_pact
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_break_accepted = {
	effect = {
		post_notification = diplomatic_proposal_break_accepted
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_break_owe_obligation = {
	effect = {
		post_proposal = proposal_break_pact_owe_obligation
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_break_call_in_obligation = {
	effect = {
		post_proposal = proposal_break_pact_call_in_obligation
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_break_declined = {
	effect = {
		post_notification = diplomatic_proposal_break_declined
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party = {
	effect = {
		post_notification = diplomatic_proposal_third_party_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_accepted = {
	effect = {
		post_notification = diplomatic_proposal_third_party_accepted
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_declined = {
	effect = {
		post_notification = diplomatic_proposal_third_party_declined
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_break = {
	effect = {
		post_notification = diplomatic_proposal_third_party_break_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_break_accepted = {
	effect = {
		post_notification = diplomatic_proposal_third_party_break_accepted
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_break_declined = {
	effect = {
		post_notification = diplomatic_proposal_third_party_break_declined
	}
}

# Root = Diplomatic Action
on_diplomats_expelled = {
}

# Root = Diplomatic Pact
on_diplomatic_pact_auto_break = {
	effect = {
		post_notification = diplomatic_pact_auto_break_notification
	}
}

# Root = Diplomatic Pact
on_diplomatic_pact_third_party_auto_break = {
	effect = {
		post_notification = diplomatic_pact_third_party_auto_break_notification
	}
}

# Root = Releasing Country
# scope:target = Released Country
on_country_released_as_independent = {
	effect = {
	}
}

# Root = Releasing Country
# scope:target = Released Country
on_country_released_as_own_subject = {
	effect = {
	}
}

# Root = Releasing Country
# scope:target = Released Country
on_country_released_as_overlord_subject = {
}

# Root = State
on_migration_target_created = {
	effect = {
		post_notification = migration_target_created
	}
}

# Root = State
on_migration_target_created_other = {
	effect = {
		post_notification = migration_target_created_other
	}
}

# Root = State
on_resource_discovered = {
	events = {
		goldrush.1
		oil_rush.1
		rubber_events.1
	}
}

# Root = State
on_resource_depleted = {
	effect = {
		owner = {
			post_notification = resource_depleted
		}
	}
}

# Root = Country
on_peace_agreement_signed_war_leader = {
	effect = {
		post_notification = peace_agreement_signed_war_leader
	}
}

# Root = Country
on_peace_agreement_signed_war_participant = {
	effect = {
		post_notification = peace_agreement_signed_war_participant
	}
}

# Root = Country
on_peace_agreement_signed_non_participant = {
	effect = {
		post_notification = peace_agreement_signed_non_participant
	}
}

# Root = Country
on_capitulation = {
	effect = {
	}
}

# Root = Country
on_self_capitulated_notification = {
	effect = {
		post_notification = self_capitulated
		set_variable = {
			name = recent_capitulation
			months = short_modifier_time
		}
	}
}

# Root = Country
on_enemy_capitulated_notification = {
	effect = {
		post_notification = enemy_capitulated
	}
}

# Root = Country
on_ally_capitulated_notification = {
	effect = {
		post_notification = ally_capitulated
	}
}

# Root = Diplomatic Play
on_diplo_play_start = {
	effect = {
		post_notification = diplo_play_start_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_start_third_party = {
	effect = {
		post_notification = diplo_play_start_third_party_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_back_down = {
	effect = {
		post_notification = diplo_play_back_down_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_back_down_involved = {
	effect = {
		post_notification = diplo_play_back_down_involved_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_join_side = {
	effect = {
		post_notification = diplo_play_join_side_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_abandon_side = {
	effect = {
		post_notification = diplo_play_abandon_side_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_war_start = {
	effect = {
		post_notification = diplo_play_war_start_notification
		post_notification = diplo_play_war_start_third_party_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_subject_released = {
	effect = {
		post_notification = diplo_play_subject_released_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_subject_released_overlord = {
	effect = {
		post_notification = diplo_play_subject_released_overlord_notification
	}
}

# Root = Diplomatic Play
# country = Country switched to
# previous = Country switched from
on_diplo_play_switch_sides = {
	effect = {
		set_global_variable = achievement_revo_needed
	}
}

# Root = Diplomatic Play
on_diplo_play_declare_neutrality = {
	effect = {
		post_notification = diplo_play_declare_neutrality_notification
	}
}


# Root = Diplomatic Play
on_sway_offer = {
	effect = {
		post_proposal = proposal_sway_offer
	}
}

# Root = Diplomatic Play
on_sway_offer_owe_obligation = {
	effect = {
		post_proposal = proposal_sway_offer_owe_obligation
	}
}


# Root = Diplomatic Play
on_sway_offer_accepted = {
	effect = {
		post_notification = sway_offer_accepted
	}
}

# Root = Diplomatic Play
on_country_swayed = {
	effect = {
		post_notification = country_swayed
	}
}

# Root = Diplomatic Play
on_sway_offer_rejected = {
	effect = {
		post_notification = sway_offer_rejected
	}
}

# Root = Building
on_production_method_changed = {
	effect = {
	}
}

# Root = owner Country of the Law
# executed when enactment of any law begins
on_law_enactment_started = {
}

# Root = owner Country of the Law
# executed when the end of a checkpoint is reached and the result is success
# (currently, this means the law will get enacted so it will be followed by
# on_law_enactment_ended and on_law_enacted).
#
# NOTE: at the point in time when this on-action is triggered, the law
# is still considered being enacted, therefore the `currently_enacting_law` link
# will work as expected, even though the enactment is about to end
on_law_checkpoint_success = {
	effect = {
		add_enactment_phase = 1
		if = {
			limit = {
				enacting_any_law = yes
			}
			trigger_event = { id = law_notification.4 days = 0 }
		}
	}
}

# Root = owner Country of the Law
# executed when the end of a checkpoint is reached and the result is advance
on_law_checkpoint_advance = {
	random_events = {
		10 = laws.1
		10 = children_rights_events.1 
		10 = free_speech_laws.1
		10 = free_speech_laws.2
		10 = labor_rights.1
		10 = labor_rights.4
		10 = children_rights_events.4
		10 = welfare_laws.1
		10 = welfare_laws.4
		10 = welfare_laws.8
		10 = migration_laws.1
		10 = migration_laws.4
		10 = bureaucracy.2
		10 = colonization.1
		10 = colonization.3
		10 = rights_of_women_laws.1
		10 = rights_of_women_laws.2
		10 = internal_security_events.2
		10 = slavery_law_events.1
		10 = slavery_law_events.4
		10 = laws_police.1
		10 = anarchy.3
		10 = tax.2
		10 = tax.5
		10 = theocracy.1
		10 = citizenship_laws.1
		10 = citizenship_laws.4
		100 = 1848.1
		100 = 1848.3
		10 = education_laws.1
		10 = education_laws.4
		10 = distribution_of_power_laws.1
		10 = council_republic_law_events.1
		10 = distribution_of_power_laws.4
		10 = monarchy_law_events.1
		10 = monarchy_law_events.2
		10 = economy_laws.1
		10 = economy_laws.4
		10 = meiji.4
		10 = meiji.5
		10 = meiji.6
		10 = conscription_laws.1
		10 = republic_laws.1
		10 = internal_security_events.4
		10 = healthcare_laws.1
		10 = healthcare_laws.4
		10 = anti_state_religion.1
		10 = distribution_of_power_laws.7
		10 = distribution_of_power_laws.10
		10 = rights_of_women_laws.5
		10 = agitators_law_events.3
		10 = agitators_law_events.11
		10 = agitators_law_events.12
		10 = agitators_law_events.14
		10 = agitators_law_events.15
		10 = agitators_law_events.17
		10 = agitators_law_events.21
		10 = agitators_law_events.22
		10 = agitators_law_events.23
		10 = agitators_law_events.24
		10 = agitators_law_events.25
		10 = agitators_law_events.26
		10 = agitators_law_events.27
		10 = agitators_law_events.28
		10 = agitators_law_events.29
		10 = agitators_law_events.30
		10 = state_atheism.2
		10 = state_atheism.6
		2 = generic_laws.1
		2 = generic_laws.4
		2 = generic_laws.7
		2 = generic_laws.10
		2 = ig_petitions.4 #Devout want State Religion
		2 = ig_petitions.7 #Intelligentsia want free speech
		2 = ig_petitions.19 #Armed forces want conscription
		2 = ig_petitions.22 #Petite-Bourgeoisie want Restricted Citizenship
		1 = law_notification.1
		10 = single_party_state.1
		5 = single_party_state.6
		5 = single_party_state.7
		10 = land_ownership_law_events.2
		10 = land_ownership_law_events.5
		10 = land_ownership_law_events.8
		10 = luddite_law_events.1
		10 = luddite_law_events.4
		10 = agitator_legal_events.21
		10 = agitator_legal_events.22
		10 = agitator_legal_events.23
		10 = agitator_legal_events.24
		10 = agitator_legal_events.25
		10 = agitator_legal_events.26
		10 = agitator_legal_events.27
		10 = agitator_legal_events.28
		10 = agitator_legal_events.29
		10 = agitator_legal_events.30
		10 = land_ownership_law_events.13
		10 = land_ownership_law_events.16
		10 = technocracy.2
		100 = nihilism.13
	}
}

# Root = owner Country of the Law
# executed when the end of a checkpoint is reached and the result is debate
on_law_checkpoint_debate = {
	random_events = {
		10 = children_rights_events.2
		10 = free_speech_laws.5
		10 = labor_rights.2
		10 = labor_rights.5
		10 = children_rights_events.6
		10 = welfare_laws.2
		10 = welfare_laws.5
		10 = welfare_laws.9
		10 = migration_laws.2
		10 = migration_laws.5
		10 = bureaucracy.3
		10 = colonization.1
		10 = free_speech_laws.5
		10 = free_speech_laws.6
		10 = internal_security_events.3
		10 = slavery_law_events.2
		10 = slavery_law_events.5
		10 = laws_police.2
		10 = anarchy.2
		10 = tax.3
		10 = tax.6
		10 = theocracy.2
		10 = citizenship_laws.2
		10 = citizenship_laws.5
		10 = education_laws.2
		10 = education_laws.5
		100 = 1848.1
		100 = 1848.3
		10 = distribution_of_power_laws.2
		10 = council_republic_law_events.2
		10 = distribution_of_power_laws.5
		10 = monarchy_law_events.3
		10 = economy_laws.2
		10 = economy_laws.5
		10 = isolation.2
		10 = conscription_laws.2
		10 = republic_laws.2
		10 = internal_security_events.5
		10 = healthcare_laws.2
		10 = healthcare_laws.5
		10 = anti_state_religion.2
		10 = colonization.4
		10 = distribution_of_power_laws.8
		10 = distribution_of_power_laws.11
		10 = rights_of_women_laws.4
		10 = rights_of_women_laws.7
		10 = law_events.1
		10 = agitators_law_events.1
		10 = agitators_law_events.2
		10 = agitators_law_events.5
		10 = agitators_law_events.8
		10 = agitators_law_events.9
		10 = agitators_law_events.10
		10 = agitators_law_events.13
		10 = agitators_law_events.18
		10 = agitators_law_events.20
		10 = state_atheism.1
		10 = state_atheism.5
		2 = generic_laws.3
		2 = generic_laws.6
		2 = generic_laws.9
		2 = generic_laws.12
		10 = ig_petitions.1 #Landowners want to reverse Suffrage
		10 = ig_petitions.10 #Rural folk want no conscription
		10 = ig_petitions.13 #Trade Unions want compulsory primary school
		20 = ig_petitions.16 #Industrialists want no graduated taxes
		1 = law_notification.2
		10 = single_party_state.2
		10 = land_ownership_law_events.1
		10 = land_ownership_law_events.4
		10 = land_ownership_law_events.7
		10 = luddite_law_events.2
		10 = luddite_law_events.5
		10 = agitators_law_events.11
		10 = agitators_law_events.12
		10 = agitators_law_events.13
		10 = agitators_law_events.14
		10 = agitators_law_events.15
		10 = agitators_law_events.16
		10 = agitators_law_events.17
		10 = agitators_law_events.18
		10 = agitators_law_events.19
		10 = agitators_law_events.20
		10 = land_ownership_law_events.12
		10 = land_ownership_law_events.15
		10 = agitator_legal_events.11
		10 = agitator_legal_events.12
		10 = agitator_legal_events.13
		10 = agitator_legal_events.14
		10 = agitator_legal_events.15
		10 = agitator_legal_events.16
		10 = agitator_legal_events.17
		10 = agitator_legal_events.18
		10 = agitator_legal_events.19
		10 = agitator_legal_events.20
		10 = technocracy.3
	}
	events = {
		tanzimat_events.1
		tanzimat_events.2
		tanzimat_events.4
	}
}


# Root = owner Country of the Law
# executed when the end of a checkpoint is reached and the result is stall
#
# NOTE: at the point in time when this on-action is triggered, the law
# is still considered being enacted, therefore the `currently_enacting_law` link
# will work as expected, even if the resulting event is particularly bad and
# will proceed to stop the enactment
on_law_checkpoint_stall = {
	random_events = {
		10 = children_rights_events.3
		10 = free_speech_laws.3
		10 = free_speech_laws.4
		10 = labor_rights.3
		10 = labor_rights.6
		10 = children_rights_events.5
		10 = welfare_laws.3
		10 = welfare_laws.6
		10 = welfare_laws.10
		10 = migration_laws.3
		10 = migration_laws.6
		10 = bureaucracy.1
		10 = colonization.1
		10 = colonization.2
		10 = rights_of_women_laws.3
		10 = internal_security_events.1
		10 = slavery_law_events.3
		10 = slavery_law_events.6
		10 = laws_police.3
		10 = anarchy.1
		10 = tax.1
		10 = tax.4
		10 = theocracy.3
		10 = citizenship_laws.3
		10 = citizenship_laws.6
		10 = education_laws.3
		10 = education_laws.6
		100 = 1848.1
		100 = 1848.3
		10 = distribution_of_power_laws.3
		10 = council_republic_law_events.3
		10 = distribution_of_power_laws.6
		10 = monarchy_law_events.4
		10 = economy_laws.3
		10 = economy_laws.6
		10 = isolation.1
		10 = conscription_laws.3
		10 = republic_laws.3
		10 = internal_security_events.6
		10 = healthcare_laws.3
		10 = healthcare_laws.6
		10 = anti_state_religion.3
		10 = distribution_of_power_laws.9
		10 = distribution_of_power_laws.12
		10 = rights_of_women_laws.6
		10 = agitators_law_events.4
		10 = agitators_law_events.6
		10 = agitators_law_events.7
		10 = agitators_law_events.16
		10 = agitators_law_events.19
		10 = state_atheism.3
		10 = state_atheism.4
		10 = exiles_more_events.2
		2 = generic_laws.2
		2 = generic_laws.5
		2 = generic_laws.8
		2 = generic_laws.11
		1 = law_notification.3
		10 = single_party_state.3
		50 = single_party_state.4
		50 = single_party_state.5
		10 = land_ownership_law_events.3
		10 = land_ownership_law_events.6
		10 = land_ownership_law_events.9
		10 = luddite_law_events.3
		10 = luddite_law_events.6
		10 = agitators_law_events.1
		10 = agitators_law_events.2
		10 = agitators_law_events.3
		10 = agitators_law_events.4
		10 = agitators_law_events.5
		10 = agitators_law_events.6
		10 = agitators_law_events.7
		10 = agitators_law_events.8
		10 = agitators_law_events.9
		10 = agitators_law_events.10
		10 = land_ownership_law_events.10
		10 = land_ownership_law_events.11
		10 = land_ownership_law_events.14
		10 = land_ownership_law_events.17
		10 = land_ownership_law_events.18
		10 = agitator_legal_events.1
		10 = agitator_legal_events.2
		10 = agitator_legal_events.3
		10 = agitator_legal_events.4
		10 = agitator_legal_events.5
		10 = agitator_legal_events.6
		10 = agitator_legal_events.7
		10 = agitator_legal_events.8
		10 = agitator_legal_events.9
		10 = agitator_legal_events.10
		10 = technocracy.1
	}
}

# Root = owner Country of the Law
# Executed when an enacting law is passed by reaching the final enactment phase
#
# NOTE: at the point in time when this on-action is triggered, the law
# is still considered being enacted, therefore the `currently_enacting_law` link
# will work as expected, even though the enactment is _just_ about to end
on_law_enactment_pass = {
	effect = {
		if = {
			limit = {
				is_player = yes
				NOT = { has_variable = achievement_vox_populi_var }
				any_political_movement = {
					desired_law = ROOT.currently_enacting_law.type
					any_supporting_character = {
						has_role = agitator
					}
				}
			}
			set_variable = achievement_vox_populi_var
		}
		if = {
			limit = {
				is_player = yes
				NOT = {
					has_variable = achievement_amish_paradise_var
				}
				is_enacting_law = law_type:law_industry_banned
				year < 1846
			}
			set_variable = achievement_amish_paradise_var
		}
	}
}

# Root = owner Country of the Law
# Executed when enactment fails by accumulating too many setbacks
#
# NOTE: at the point in time when this on-action is triggered, the law
# is still considered being enacted, therefore the `currently_enacting_law` link
# will work as expected, even though the enactment is _just_ about to end
on_law_enactment_fail = {
	effect = {
		post_notification = enactment_failed
	}
}

# Root = owner Country of the Law
# executed when enactment stops for any reason. Could be because the law has
# been enacted, or because the enactment has been stopped by the player.
#
# NOTE: at the point in time when this on-action is triggered, the law
# is still considered being enacted, therefore the `currently_enacting_law` link
# will work as expected, even though the enactment is _just_ about to end
on_law_enactment_ended = {
}

# Root owner Country of the Law
# executed when the law is activated for any reason. It's usually because it
# has been enacted, but script can activate laws directly without going through
# the enactment process. Normally, it's immediately preceded by
# on_law_enactment_ended, but if a law is directly set by script, thus
# bypassing the enactment process, this will execute while
# on_law_enactment_ended will not
#
# NOTE: unlike the other on_law_<something> on-actions, at the point in time
# when this is triggered the law that was enacted is no longer considered being
# enacted. Therefore using the `currently_enacting_law` link will return the
# null law
on_law_activated = {
	effect = {

	}

}

# Root = Institution
on_investment_increased = {
	effect = {
		post_notification = institution_investment_increased
	}
}

# Root = Institution
on_investment_decreased = {
	effect = {
		post_notification = institution_investment_decreased
	}
}

# Root = Country
# scope:target = Uprising country
on_revolution_start = {
}

# Root = Country
# scope:target = Uprising country
on_revolution_end = {
	effect = {
	}
}

# Root = Country
# This action is triggered after `on_revolution_end`
on_civil_war_won = {
}

# Root = Country
on_wargoal_enforced = {
	effect = {
		set_variable = {
            name = recently_won_war
            days = 600
            value = yes
        }
        
	}
	
}

# Root = Interest Group
on_ig_resigned_government = {
	effect = {
		post_notification = ig_resigned_government
	}
}

# Root = Culture
on_new_culture_obsession = {
	effect = {
		post_notification = new_culture_obsession
	}
}

# Root = Country
on_rank_changed = {
	effect = {
		post_notification = rank_changed_notification
	}
}

# Root = Character
on_heir_born = {
	effect = {
		post_notification = heir_born_notification
	}
}

# Root = Home Country
# scope:target = Secession country
on_secession_country_helped_by_home_country = {
	effect = {
		annex = scope:target
	}
}

# Root = Home Countr
# scope:target = Secession country
on_secession_country_not_helped_by_home_country = {
	effect = {
		trigger_event = { id = civil_war_events.1 days = 0 }
	}
}

# Root = Diplomatic Play
# scope:actor = War Goal Owner
on_wargoal_added = {
	effect = {
		post_notification = wargoal_added
	}
}

# Root = Diplomatic Play
# scope:actor = War Goal Owner
on_wargoal_removed = {
	effect = {
		post_notification = wargoal_removed
	}
}

# Root = Diplomatic Play
# scope:actor = Initiator country
# scope:target = Target country
on_war_end = {

}

# Root = journal entry
on_journal_entry_activated = {
	effect = {
		post_notification = journal_entry_activated
	}
}

# Root = journal entry
on_journal_entry_deactivated = {
	effect = {
		post_notification = journal_entry_deactivated
	}
}

# Root = journal entry
on_journal_entry_completed = {
	effect = {
		post_notification = journal_entry_completed
	}
}

# Root = journal entry
on_journal_entry_failed = {
}

# Root = country
on_native_uprising = {
	effect = {
		post_notification = native_uprising_notification
	}
}

# Root = state
on_state_incorporation = {
	effect = {
		
	}
}

# Root = political movement
on_political_movement_formed = {
	effect = {
		post_notification = political_movement_formed
	}
}

# Root = political movement
on_political_movement_disbanded = {
	effect = {
		post_notification = political_movement_disbanded
	}
}

# Root = Colony state
on_colony_created = {
}

# Root = Strategic Region
# scope:actor = Aggressor country
# scope:target = Target country
on_diplomatic_incident = {
	effect = {
		
	}
}

# Root = Objective
on_sub_objective_completed = {
}

# Root = Objective
on_sub_objective_failed = {
}

# Root = Objective
on_objective_completed = {
}

# Root = Country
# scope:target = Party created
on_party_created = {
}

# Root = Country
# scope:target = Party disbanded
on_party_disbanded = {
}

# Root = Country
on_election_campaign_start = {
	effect = {
		debug_log = "Election Campaign Started"
	}
}

# Root = Country
on_election_campaign_end = {
	effect = {
		debug_log = "Election Campaign Ended"
	}
}

# Root = Country
on_obligation_owed_by_us_expired = {
	effect = {
		post_notification = obligation_owed_by_us_expired
	}
}

# Root = Country
on_obligation_owed_to_us_expired = {
	effect = {
		post_notification = obligation_owed_to_us_expired
	}
}

# Root = Country
on_start_supporting_unification = {
	effect = {
		post_notification = start_supporting_unification
	}
}

# Root = Country
on_unification_candidate_added = {
	effect = {
		post_notification = unification_candidate_added
	}
}

# Root = Country
on_unification_candidate_removed = {
	effect = {
		post_notification = unification_candidate_removed
	}
}

# Root = Country
on_stop_supporting_unification = {
	effect = {
		post_notification = stop_supporting_unification
	}
}

# Root = Character
on_enemy_convoys_raided = {
	effect = {
		post_notification = enemy_convoys_raided
	}
}

# Root = Character
on_our_convoys_raided = {
	effect = {
		post_notification = our_convoys_raided
	}
}

# Root = Country
on_repudiate_obligation = {
	effect = {
		scope:target_country = {
			change_relations = { country = root value = -50 }
			hidden_effect = {
				random_list = {
					50 = {
						if = {
							limit = {
								country_rank > root.country_rank
							}
							set_secret_goal = {
								country = root
								secret_goal = dominate
							}								
						}
						else = {
							set_secret_goal = {
								country = root
								secret_goal = antagonize
							}							
						}				
					}
					50 = {}
				}
			}		
		}
		every_country = {
			limit = { 
				NOT = { this = scope:target_country }
				root = { owes_obligation_to = prev } 
			}
			change_relations = { country = root value = -30 }
			hidden_effect = {
				random_list = {
					25 = {
						if = {
							limit = {
								country_rank > root.country_rank
							}
							set_secret_goal = {
								country = root
								secret_goal = dominate
							}								
						}
						else = {
							set_secret_goal = {
								country = root
								secret_goal = antagonize
							}							
						}					
					}
					75 = {}
				}
			}
		}		
		hidden_effect = { # Should not stack the modifier
			if = { 
				limit = { has_modifier = repudiated_obligation } 
				remove_modifier = repudiated_obligation
			}			
		}
		add_modifier = {
			name = repudiated_obligation
			months = normal_modifier_time
			is_decaying = yes			
		}		
	}
}

# Root = Character
on_character_recruitment = {
	effect = {
	}
}