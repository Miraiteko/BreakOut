#出生抚育者比例结算
breeders_ratio_monthly_check = {
	save_scope_as = checked_country
	
	#计算抚育者资质参数
	set_variable = {
		name = min_breeders_ratio
		value = scope:checked_country.modifier:state_min_breeders_ratio_add
	}
	#上限
	set_variable = {
		name = max_breeders_ratio
		value = scope:checked_country.modifier:state_max_breeders_ratio_add
	}
	#如果抚育者人口比例低于下限
	if = {	
		limit = {
			pop_type_percent_country = {
				pop_type = breeders
				percent < var:min_breeders_ratio
			}
		}
		every_scope_state = {
			set_variable = {
				name = breeders_gain_other_qualifications_bonus
				value = -1
			}
			set_variable = {
				name = other_gain_breeders_qualifications_bonus
				value = 1
			}
			random_scope_pop = {
				limit = {
					NOT = { is_pop_type = breeders }
					is_employed = no
				}
				change_poptype =  pop_type:breeders
			}
		}
	}
	else_if = { #如果抚育者人口比例高于上限
		limit = {
			pop_type_percent_country = {
				pop_type = breeders
				percent > var:max_breeders_ratio
			}
		}
		every_scope_state = {
			set_variable = {
				name = other_gain_breeders_qualifications_bonus
				value = -1
			}
			set_variable = {
				name = breeders_gain_other_qualifications_bonus
				value = 1
			}
			random_scope_pop = {
				limit = {
					is_pop_type = breeders
					is_employed = no
				}
				change_poptype =  pop_type:laborers
			}
		}
	}
	else = {
		every_scope_state = {
			set_variable = {
				name = breeders_gain_other_qualifications_bonus
				value = 1
			}
			set_variable = {
				name = other_gain_breeders_qualifications_bonus
				value = 1
			}
		}
	}
}

#生产经验结算
production_exp_monthly_check = {	
	every_scope_building = {
		limit = { always = yes }
		save_scope_as = checked_building
		#储存老变量
		state = {
			set_variable = {
				name = building_production_exp
				value = scope:checked_building.production_exp
			}
			set_variable = {
				name = building_production_exp_cap
				value = scope:checked_building.production_exp_cap
			}
			set_variable = {
				name = building_production_exp_growth
				value = scope:checked_building.production_exp_growth
			}
			set_variable = {
				name = building_production_exp_decay
				value = scope:checked_building.production_exp_decay
			}
		}
		#计算新生产经验
		state = {
			change_variable = {
				name = building_production_exp
				subtract = var:building_production_exp_decay
			}
			change_variable = {
				name = building_production_exp
				add = var:building_production_exp_growth
			}
		}
		remove_modifier = production_exp_modifier
		if = {
			limit = { state.var:building_production_exp > 0  }
			add_modifier = {
				name = production_exp_modifier
				multiplier = new_production_exp
			}
		}
		#计算溢出上限部分
		remove_modifier = production_exp_over_cap_modifier
		if = {
			limit = {
				state = {
					var:building_production_exp > var:building_production_exp_cap
				}
			}
			add_modifier = {
				name = production_exp_over_cap_modifier
				multiplier = new_production_exp_over_cap
			}
		}
	}
}
#技术突破
eurika = {
	#输入以下参数：目标科技TECHNOLOGY,难度DIFFICULTY,技术突破产品STRENGTH_GOOD,技术突破强度STRENGTH
	random_list = {
		$DIFFICULTY$ = {

		}
		0 = {
			modifier = {
				$STRENGTH_GOOD$ = {
					add = market_goods_sell_orders
				}
			}
			save_scope_as = current_country_scope
			$STRENGTH_GOOD$ = {
				goods = {
					save_scope_as = current_good_scope
				}
			}
			set_variable = {
				name = recent_eurika_size
				value = $EURIKA_SIZE$ 
			}
			set_variable = {
				name = recent_eurika_technology
				value = $TECHNOLOGY$
			}
			add_technology_progress = { 
				progress = $EURIKA_SIZE$ 
				technology = $TECHNOLOGY$
			}

			
			$TECHNOLOGY$ = {
				save_scope_as = current_technology_scope
			}
			post_notification = eurika_notification
		}
	}
}
#资源枯竭结算
resource_deplete_monthly_check = {
	save_scope_as = checked_state
	#煤
	if = {
		limit = {
			has_potential_resource = bg_coal_mining
		}
		#初始化
		if = {
			limit = { NOT = { has_variable = base_coal_resource }}
			set_variable = {
				name = base_coal_resource
				value = 100000
			}
		}
		if = {
			limit = { NOT = { has_variable = depleted_coal_resource }}
			set_variable = {
				name = depleted_coal_resource
				value = 0
			}
		}
		#计算每月采掘量
		set_variable = {
			name = new_depleted_coal_resource
			value = 0
		}
		every_scope_building = {
			limit = {
				is_building_type = building_coal_mine
			}
			#基础方式
			if = {
				limit = { has_active_production_method = pm_picks_and_shovels_building_coal_mine } 
				scope:checked_state = {
					change_variable = {
						name = new_depleted_coal_resource
						add = {
							value = 40
							multiply = PREV.occupancy
							multiply = PREV.level
						}
					}
				}
			}
			else_if = {
				limit = { has_active_production_method = pm_atmospheric_engine_pump_building_coal_mine } 
				scope:checked_state = {
					change_variable = {
						name = new_depleted_coal_resource
						add = {
							value = 80
							multiply = PREV.occupancy
							multiply = PREV.level
						}
					}
				}
			}
			else_if = {
				limit = { has_active_production_method = pm_condensing_engine_pump_building_coal_mine } 
				scope:checked_state = {
					change_variable = {
						name = new_depleted_coal_resource
						add = {
							value = 120
							multiply = PREV.occupancy
							multiply = PREV.level
						}
					}
				}
			}
			else_if = {
				limit = { has_active_production_method = pm_diesel_pump_building_coal_mine } 
				scope:checked_state = {
					change_variable = {
						name = new_depleted_coal_resource
						add = {
							value = 180
							multiply = PREV.occupancy
							multiply = PREV.level
						}
					}
				}
			}
			#炸药
			if = {
				limit = { has_active_production_method = pm_nitroglycerin_building_coal_mine } 
				scope:checked_state = {
					change_variable = {
						name = new_depleted_coal_resource
						add = {
							value = 30
							multiply = PREV.occupancy
							multiply = PREV.level
						}
					}
				}
			}
			else_if = {
				limit = { has_active_production_method = pm_dynamite_building_coal_mine } 
				scope:checked_state = {
					change_variable = {
						name = new_depleted_coal_resource
						add = {
							value = 50
							multiply = PREV.occupancy
							multiply = PREV.level
						}
					}
				}
			}
		}
		change_variable = {
			name = new_depleted_coal_resource
			multiply = {
				value = 1
				subtract = coal_resource_difficulty
			}
		}
		#更新采掘量
		change_variable = {
			name = depleted_coal_resource
			add = var:new_depleted_coal_resource
		}
		#调整buff
		remove_modifier = coal_mining_deplete_modifier
		if = {
			limit = { coal_resource_difficulty > 0.1 }
			add_modifier = {
				name = coal_mining_deplete_modifier
				multiplier = coal_resource_difficulty
			}
		}
	}
	
	#石油
		if = {
		limit = {
			has_potential_resource = bg_oil_extraction
		}
		#初始化
		if = {
			limit = { NOT = { has_variable = base_oil_resource }}
			set_variable = {
				name = base_oil_resource
				value = 100000
			}
		}
		if = {
			limit = { NOT = { has_variable = depleted_oil_resource }}
			set_variable = {
				name = depleted_oil_resource
				value = 0
			}
		}
		#计算每月采掘量
		set_variable = {
			name = new_depleted_oil_resource
			value = 0
		}
		every_scope_building = {
			limit = {
				is_building_type = building_oil_rig
			}
			#基础方式
			if = {
				limit = { has_active_production_method = pm_steam_derricks } 
				scope:checked_state = {
					change_variable = {
						name = new_depleted_oil_resource
						add = {
							value = 120
							multiply = PREV.occupancy
							multiply = PREV.level
						}
					}
				}
			}
			else_if = {
				limit = { has_active_production_method = pm_combustion_derricks } 
				scope:checked_state = {
					change_variable = {
						name = new_depleted_oil_resource
						add = {
							value = 200
							multiply = PREV.occupancy
							multiply = PREV.level
						}
					}
				}
			}
		}
		change_variable = {
			name = new_depleted_oil_resource
			multiply = {
				value = 1
				subtract = oil_resource_difficulty
			}
		}
		#更新采掘量
		change_variable = {
			name = depleted_oil_resource
			add = var:new_depleted_oil_resource
		}
		#调整buff
		remove_modifier = oil_extraction_deplete_modifier
		if = {
			limit = { oil_resource_difficulty > 0.1 }
			add_modifier = {
				name = oil_extraction_deplete_modifier
				multiplier = oil_resource_difficulty
			}
		}
	}
}

#破产结算
bankruptcy_check = {
	if = {
		limit = {
			NOT = { exists = var:declaredbankruptcy }
			has_modifier = declared_bankruptcy
		}
		every_scope_state = {
			remove_building = building_barracks
			remove_building = building_naval_base
			remove_building = building_port
			remove_building = building_university
			remove_building = building_construction_sector
		}
		set_variable = {
			name = declaredbankruptcy
			days = 3650
			value = 233
		}
		change_infamy = 100
	}

}
breakout_AI = {
	#ai在资金过多的时候扩建建造部门
	if = {
		limit = {
			is_ai = yes
			has_wasted_construction = no
			is_construction_paused = no
			gold_reserves > gold_reserves_limit
			weekly_net_fixed_income >= 10000
			construction_queue_government_duration > 10
			
		}
		random_scope_state = {
			limit = {
				is_incorporated = yes
				OR = {
					NOT = { has_building = building_construction_sector }
					any_scope_building = {
						is_building_type = building_construction_sector
						occupancy >= 0.9
					}
				}
			}
			start_building_construction = building_construction_sector
		}
	}
	#ai裁撤无能工厂，暂时做不到
	if = {
		limit = {
			always = no
			is_ai = yes
			construction_queue_duration < 3
		}
		every_scope_state = {
			limit = { market_access < 0.8 }
			random_scope_building = {
				limit = {
					is_under_construction = no
					cash_reserves_ratio < 0.01
					occupancy < 0.01
					weekly_profit < 0
				}
				save_scope_as = removed_building
			}
			#remove_building = scope:removed_building
		}
	}
}
#祭典节日
sacrifice_festival_effect = {
	add_modifier = {
		name = sacrifice_festival_modifier
		months = 1
		is_decaying = yes
	}
}