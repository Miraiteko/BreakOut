#出生抚育者比例结算
breeder_ratio_monthly_check = {
	save_scope_as = checked_country
	
	#计算抚育者资质参数
	#下限
	if = {
		limit = { has_law = law_type:law_no_womens_rights }
		set_variable = {
			name = min_breeder_ratio
			value = 0.45
		}
	}
	else_if = {
		limit = { has_law = law_type:law_women_own_property }
		set_variable = {
			name = min_breeder_ratio
			value = 0.40
		}
	}
	else_if = {
		limit = { has_law = law_type:law_women_in_the_workplace }
		set_variable = {
			name = min_breeder_ratio
			value = 0.25
		}
	}
	else = {
		set_variable = {
			name = min_breeder_ratio
			value = 0.10
		}
	}
	#上限
	set_variable = {
		name = max_breeder_ratio
		value = 0.55
	}
	if = {	
		limit = {
			pop_type_percent_country = {
				pop_type = breeder
				percent < var:min_breeder_ratio
			}
		}
		set_variable = {
			name = breeder_gain_other_qualifications_bonus
			value = -5
		}
	}
	else = {
		set_variable = {
			name = breeder_gain_other_qualifications_bonus
			value = 0
		}
	}
	if = {
		limit = {
			pop_type_percent_country = {
				pop_type = breeder
				percent > var:max_breeder_ratio
			}
		}
		set_variable = {
			name = other_gain_breeder_qualifications_bonus
			value = -2
		}
	}
	else = {
		set_variable = {
			name = other_gain_breeder_qualifications_bonus
			value = 2
		}
	}
}
#出生率结算
state_breed_monthly_check = {
	#计算各个地区的劳动力再生产能力
	save_scope_as = checked_state
	#计算劳动力再生产能力
	set_variable = {
		name = breed_power
		value = 0
	}
	set_variable = {
		name = breed_quality
		value = 0
	}
	every_scope_building = {
		limit = {
			OR = { #自给农业
				is_building_type = building_subsistence_farms
				is_building_type = building_subsistence_orchards
				is_building_type = building_subsistence_pastures
			}
		}
		if = {
			limit = { 
				OR = { #农奴制
					has_active_production_method = pm_serfdom 
					has_active_production_method = pm_serfdom_building_subsistence_pastures
				}
			}
			scope:checked_state = {
				change_variable = {
					name = breed_power
					add = {
						value = 85000 #农奴制一级提供85000再生产
						multiply = PREV.occupancy
						multiply = PREV.level
					}
				}
				change_variable = {
					name = breed_quality
					add = {
						value = 851 #农奴制一级提供850质量，为了避免显示为0，设定成851
						multiply = PREV.occupancy
						multiply = PREV.level
					}
				}
			}
		}
		else = {
			scope:checked_state = {
				change_variable = {
					name = breed_power
					add = {
						value = 60000 #自耕农一级提供60000再生产
						multiply = PREV.occupancy
						multiply = PREV.level
					}
				}
				change_variable = {
					name = breed_quality
					add = {
						value = 3001 #自耕农一级提供3000质量
						multiply = PREV.occupancy
						multiply = PREV.level
					}
				}
			}
		}
	}
	every_scope_building = {
		limit = {
			OR = { #居民区
				is_building_type = breed_center
			}
		}
		if = {
			limit = { has_active_production_method = pm_tradition_breeder } #多子多福
			scope:checked_state = {
				change_variable = {
					name = breed_power
					add = {
						value = 42000 #多子多福一级提供42000
						multiply = PREV.occupancy
						multiply = PREV.level
					}
				}
				change_variable = {
					name = breed_quality
					add = {
						value = 12600 #多子多福一级提供12600质量
						multiply = PREV.occupancy
						multiply = PREV.level
					}
				}
			}
		}
		else = {
			scope:checked_state = {
				change_variable = {
					name = breed_power
					add = {
						value = 30000 #优生优育一级提供30000
						multiply = PREV.occupancy
						multiply = PREV.level
					}
				}
				change_variable = {
					name = breed_quality
					add = {
						value = 15000 #优生优育一级提供15000质量
						multiply = PREV.occupancy
						multiply = PREV.level
					}
				}
			}
		}
	}
	
	#计算劳动力再生产能力
	set_variable = {
		name = breed_ratio
		value = var:breed_power
	}
	
	change_variable = {
		name = breed_ratio
		divide = {
			value = state_population
			min = 1
		}
	}

	#按照比例决定生育率buff
	remove_modifier = breed_ratio_modifier
	add_modifier = {
		name = breed_ratio_modifier
		multiplier = breed_ratio_mod
	}
	#计算基础受教育机会
	set_variable = {
		name = base_education_access
		value = var:breed_quality
	}
	change_variable = {
		name = base_education_access
		divide = {
			value = var:breed_power
			min = 1
		}
	}
	remove_modifier = base_education_access_modifier
	add_modifier = {
		name = base_education_access_modifier
		multiplier = base_education_access_mod
	}
}

#生产经验结算
production_exp_monthly_check = {
	save_scope_as = checked_state
	#建筑暂时不能储存变量，储存在地区上进行测试

	if = {
		limit = { 
			NOT = { has_variable = production_exp }
		}
		set_variable = {
			name = production_exp
			value = 0
		}
	}
	#计算增长
	set_variable = { #来自于基建的增长
		name = production_exp_change
		value = {
			value = infrastructure
			multiply = 0.01
		}
	}
	change_variable = { #衰退
		name = production_exp_change
		subtract = {
			value = var:production_exp
			multiply = 0.05
		}
	}
	change_variable = {
		name = production_exp
		add = var:production_exp_change
	}		
	
	
	
	#根据生产经验给buff
	every_scope_building = {
		limit = { always = yes }
		#给buff
		if = {
			limit = {
				state = { var:production_exp <= 20 }
			}
			if ={
				limit = {
					state = { var:production_exp <= 10 }
				}
				if ={
					limit = {
						state = { var:production_exp <= 05 }
					}
					add_modifier = {
						name = production_exp_modifier_00
						is_decaying = no
					}
				}
				else = {
					add_modifier = {
						name = production_exp_modifier_05
						is_decaying = no
					}
				}
			}	
			else ={
				if ={
					limit = {
						state = { var:production_exp <= 15 }
					}
					add_modifier = {
						name = production_exp_modifier_10
						is_decaying = no
					}
				}
				else = {
					add_modifier = {
						name = production_exp_modifier_15
						is_decaying = no
					}
				}
			}	
		}
		else_if = {
			limit = {
				state = { var:production_exp <= 40 }
			}
			if ={
				limit = {
					state = { var:production_exp <= 30 }
				}
				if ={
					limit = {
						state = { var:production_exp <= 25 }
					}
					add_modifier = {
						name = production_exp_modifier_20
						is_decaying = no
					}
				}
				else = {
					add_modifier = {
						name = production_exp_modifier_25
						is_decaying = no
					}
				}
			}	
			else ={
				if ={
					limit = {
						state = { var:production_exp <= 35 }
					}
					add_modifier = {
						name = production_exp_modifier_30
						is_decaying = no
					}
				}
				else = {
					add_modifier = {
						name = production_exp_modifier_35
						is_decaying = no
					}
				}
			}	
		}
		else_if = {
			limit = {
				state = { var:production_exp <= 60 }
			}
			if ={
				limit = {
					state = { var:production_exp <= 50 }
				}
				if ={
					limit = {
						state = { var:production_exp <= 45 }
					}
					add_modifier = {
						name = production_exp_modifier_40
						is_decaying = no
					}
				}
				else = {
					add_modifier = {
						name = production_exp_modifier_45
						is_decaying = no
					}
				}
			}	
			else ={
				if ={
					limit = {
						state = { var:production_exp <= 55 }
					}
					add_modifier = {
						name = production_exp_modifier_50
						is_decaying = no
					}
				}
				else = {
					add_modifier = {
						name = production_exp_modifier_55
						is_decaying = no
					}
				}
			}
		}
		else = {
			if ={
				limit = {
					state = { var:production_exp <= 65 }
				}
				add_modifier = {
					name = production_exp_modifier_60
					is_decaying = no
				}
			}	
			else_if ={
				limit = {
					state = { var:production_exp <= 70 }
				}
				add_modifier = {
					name = production_exp_modifier_65
					is_decaying = no
				}
			}	
			else_if ={
				limit = {
					state = { var:production_exp <= 75 }
				}
				add_modifier = {
					name = production_exp_modifier_70
					is_decaying = no
				}
			}	
			else ={
				add_modifier = {
					name = production_exp_modifier_75
					is_decaying = no
				}
			}
		}
	}
}
#破产结算
bankruptcy_check = {
	if = {
		limit = {
			NOT = { has_modifier = bankruptcy }
			has_modifier = declared_bankruptcy
		}
		every_scope_state = {
			remove_building = building_barracks
			remove_building = building_naval_base
			remove_building = building_port
			remove_building = building_university
			remove_building = building_construction_sector
		}
		add_modifier = {
			name = bankruptcy
			years = 10
			is_decaying = yes
		}
		change_infamy = 300
	}
	
	#松散部落实现集权
	if = {
		limit = {
			is_country_type = decentralized
			has_technology_researched = centralization
		}
		set_country_type = unrecognized
	}
}